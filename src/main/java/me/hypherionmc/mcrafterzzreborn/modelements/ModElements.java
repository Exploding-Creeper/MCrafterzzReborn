/*
 * Copyright (c) 2021. All Rights Reserved License
 *
 * Coded by HypherionMC based on code originally created by MCrafterzz. Code used with written permission
 */

package me.hypherionmc.mcrafterzzreborn.modelements;

import me.hypherionmc.mcrafterzzreborn.RecipeRemover;
import me.hypherionmc.mcrafterzzreborn.Registry;
import me.hypherionmc.mcrafterzzreborn.blocks.*;
import me.hypherionmc.mcrafterzzreborn.config.Config;
import me.hypherionmc.mcrafterzzreborn.creativetabs.*;
import me.hypherionmc.mcrafterzzreborn.items.Shield;
import me.hypherionmc.mcrafterzzreborn.util.ModUtil;
import net.minecraft.advancements.Advancement;
import net.minecraft.block.Block;
import net.minecraft.block.BlockBush;
import net.minecraft.block.SoundType;
import net.minecraft.block.material.MapColor;
import net.minecraft.block.material.Material;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.item.crafting.Ingredient;
import net.minecraft.stats.StatBase;
import net.minecraft.util.DamageSource;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.fml.common.network.NetworkRegistry;
import net.minecraftforge.fml.common.registry.GameRegistry;
import net.minecraftforge.oredict.OreDictionary;

public class ModElements {
    public static ModTab creativeTab = new ModTab("creativeTab");
    public static ToolsTab creativeTabTools = new ToolsTab("creativeTabTools");
    public static BuildingTab creativeTabBuilding = new BuildingTab("creativeTabBuilding");
    public static MapMakingTab creativeTabMapMaking = new MapMakingTab("creativeTabMapMaking");
    public static WIPTab creativeTabWorkInProgress = new WIPTab("creativeTabWorkInProgress");
    public static WorldTab creativeTabWorld = new WorldTab("creativeTabWorld");
    public static SmallerBuildingBlocks creativeTabSmallerBuildingBlocks = new SmallerBuildingBlocks("creativeTabSmallerBuildingBlocks");
    
    public static Advancement copperMiner;
    public static Advancement tinMiner;
    public static Advancement amethystMiner;
    public static Advancement bronzeCreator;
    public static Advancement diamondUpgrade;
    public static Advancement amethystUpgrade;
    public static Advancement theOpTool;
    public static Advancement moreFlowers;

    public static StatBase open_crusher_gui;
    public static DamageSource death_block;
    public static Block amethyst_ore;
    public static Block jade_ore;
    public static Block copper_ore;
    public static Block tin_ore;
    public static Block amethyst_block;
    public static Block jade_block;
    public static Block copper_block;
    public static Block tin_block;
    public static Block bronze_block;
    public static Item amethyst;
    public static Item jade;
    public static Item copper_ingot;
    public static Item tin_ingot;
    public static Item bronze_ingot;
    //public static Block iron_chest;
    public static Block copper_door;
    public static Block tin_door;
    public static Block bronze_door;
    public static Block amethyst_door;
    public static Item copper_door_item;
    public static Item tin_door_item;
    public static Item bronze_door_item;
    public static Item amethyst_door_item;
    public static Block diamond_pressure_plate;
    public static Block copper_pressure_plate;
    public static Block tin_pressure_plate;
    public static Block bronze_pressure_plate;
    public static Block amethyst_pressure_plate;
    public static Block jade_pressure_plate;
    public static Block emerald_pressure_plate;
    public static Block quartz_pressure_plate;
    public static Block stone_bars;
    public static Block gold_bars;
    public static Block diamond_bars;
    public static Block copper_bars;
    public static Block tin_bars;
    public static Block bronze_bars;
    public static Block amethyst_bars;
    public static Block jade_bars;
    public static Block emerald_bars;
    public static Block quartz_bars;
    public static Block stone_trapdoor;
    public static Block gold_trapdoor;
    public static Block diamond_trapdoor;
    public static Block copper_trapdoor;
    public static Block tin_trapdoor;
    public static Block bronze_trapdoor;
    public static Block amethyst_trapdoor;
    public static Block jade_trapdoor;
    public static Block emerald_trapdoor;
    public static Block quartz_trapdoor;
    public static Block iron_button;
    public static Block gold_button;
    public static Block diamond_button;
    public static Block copper_button;
    public static Block tin_button;
    public static Block bronze_button;
    public static Block amethyst_button;
    public static Block jade_button;
    public static Block emerald_button;
    public static Block quartz_button;
    public static Block colour_block_white;
    public static Block colour_block_light_gray;
    public static Block colour_block_gray;
    public static Block colour_block_black;
    public static Block colour_block_light_blue;
    public static Block colour_block_cyan;
    public static Block colour_block_blue;
    public static Block colour_block_light_green;
    public static Block colour_block_green;
    public static Block colour_block_yellow;
    public static Block colour_block_orange;
    public static Block colour_block_brown;
    public static Block colour_block_magenta;
    public static Block colour_block_purple;
    public static Block colour_block_red;
    public static Block colour_block_pink;
    public static Block colour_changing_block;
    public static Block glowing_colour_block_white;
    public static Block glowing_colour_block_light_gray;
    public static Block glowing_colour_block_gray;
    public static Block glowing_colour_block_black;
    public static Block glowing_colour_block_light_blue;
    public static Block glowing_colour_block_cyan;
    public static Block glowing_colour_block_blue;
    public static Block glowing_colour_block_light_green;
    public static Block glowing_colour_block_green;
    public static Block glowing_colour_block_yellow;
    public static Block glowing_colour_block_orange;
    public static Block glowing_colour_block_brown;
    public static Block glowing_colour_block_magenta;
    public static Block glowing_colour_block_purple;
    public static Block glowing_colour_block_red;
    public static Block glowing_colour_block_pink;
    public static Block glowing_colour_changing_block;
    public static Block coloured_stone_bricks_white;
    public static Block coloured_stone_bricks_light_gray;
    public static Block coloured_stone_bricks_gray;
    public static Block coloured_stone_bricks_black;
    public static Block coloured_stone_bricks_light_blue;
    public static Block coloured_stone_bricks_cyan;
    public static Block coloured_stone_bricks_blue;
    public static Block coloured_stone_bricks_light_green;
    public static Block coloured_stone_bricks_green;
    public static Block coloured_stone_bricks_yellow;
    public static Block coloured_stone_bricks_orange;
    public static Block coloured_stone_bricks_brown;
    public static Block coloured_stone_bricks_magenta;
    public static Block coloured_stone_bricks_purple;
    public static Block coloured_stone_bricks_red;
    public static Block coloured_stone_bricks_pink;
    public static Block colour_changing_stone_bricks;
    public static Block glowing_coloured_stone_bricks_white;
    public static Block glowing_coloured_stone_bricks_light_gray;
    public static Block glowing_coloured_stone_bricks_gray;
    public static Block glowing_coloured_stone_bricks_black;
    public static Block glowing_coloured_stone_bricks_light_blue;
    public static Block glowing_coloured_stone_bricks_cyan;
    public static Block glowing_coloured_stone_bricks_blue;
    public static Block glowing_coloured_stone_bricks_light_green;
    public static Block glowing_coloured_stone_bricks_green;
    public static Block glowing_coloured_stone_bricks_yellow;
    public static Block glowing_coloured_stone_bricks_orange;
    public static Block glowing_coloured_stone_bricks_brown;
    public static Block glowing_coloured_stone_bricks_magenta;
    public static Block glowing_coloured_stone_bricks_purple;
    public static Block glowing_coloured_stone_bricks_red;
    public static Block glowing_coloured_stone_bricks_pink;
    public static Block glowing_colour_changing_stone_bricks;
    public static Block coloured_stone_white;
    public static Block coloured_stone_light_gray;
    public static Block coloured_stone_gray;
    public static Block coloured_stone_black;
    public static Block coloured_stone_light_blue;
    public static Block coloured_stone_cyan;
    public static Block coloured_stone_blue;
    public static Block coloured_stone_light_green;
    public static Block coloured_stone_green;
    public static Block coloured_stone_yellow;
    public static Block coloured_stone_orange;
    public static Block coloured_stone_brown;
    public static Block coloured_stone_magenta;
    public static Block coloured_stone_purple;
    public static Block coloured_stone_red;
    public static Block coloured_stone_pink;
    public static Block colour_changing_stone;
    public static Block glowing_coloured_stone_white;
    public static Block glowing_coloured_stone_light_gray;
    public static Block glowing_coloured_stone_gray;
    public static Block glowing_coloured_stone_black;
    public static Block glowing_coloured_stone_light_blue;
    public static Block glowing_coloured_stone_cyan;
    public static Block glowing_coloured_stone_blue;
    public static Block glowing_coloured_stone_light_green;
    public static Block glowing_coloured_stone_green;
    public static Block glowing_coloured_stone_yellow;
    public static Block glowing_coloured_stone_orange;
    public static Block glowing_coloured_stone_brown;
    public static Block glowing_coloured_stone_magenta;
    public static Block glowing_coloured_stone_purple;
    public static Block glowing_coloured_stone_red;
    public static Block glowing_coloured_stone_pink;
    public static Block glowing_colour_changing_stone;
    public static Block coloured_cobblestone_white;
    public static Block coloured_cobblestone_light_gray;
    public static Block coloured_cobblestone_gray;
    public static Block coloured_cobblestone_black;
    public static Block coloured_cobblestone_light_blue;
    public static Block coloured_cobblestone_cyan;
    public static Block coloured_cobblestone_blue;
    public static Block coloured_cobblestone_light_green;
    public static Block coloured_cobblestone_green;
    public static Block coloured_cobblestone_yellow;
    public static Block coloured_cobblestone_orange;
    public static Block coloured_cobblestone_brown;
    public static Block coloured_cobblestone_magenta;
    public static Block coloured_cobblestone_purple;
    public static Block coloured_cobblestone_red;
    public static Block coloured_cobblestone_pink;
    public static Block colour_changing_cobblestone;
    public static Block glowing_coloured_cobblestone_white;
    public static Block glowing_coloured_cobblestone_light_gray;
    public static Block glowing_coloured_cobblestone_gray;
    public static Block glowing_coloured_cobblestone_black;
    public static Block glowing_coloured_cobblestone_light_blue;
    public static Block glowing_coloured_cobblestone_cyan;
    public static Block glowing_coloured_cobblestone_blue;
    public static Block glowing_coloured_cobblestone_light_green;
    public static Block glowing_coloured_cobblestone_green;
    public static Block glowing_coloured_cobblestone_yellow;
    public static Block glowing_coloured_cobblestone_orange;
    public static Block glowing_coloured_cobblestone_brown;
    public static Block glowing_coloured_cobblestone_magenta;
    public static Block glowing_coloured_cobblestone_purple;
    public static Block glowing_coloured_cobblestone_red;
    public static Block glowing_coloured_cobblestone_pink;
    public static Block glowing_colour_changing_cobblestone;
    public static Block seamless_stone_slab;
    public static Block seamless_oak_log;
    public static Block seamless_birch_log;
    public static Block seamless_spruce_log;
    public static Block seamless_jungle_log;
    public static Block seamless_acacia_log;
    public static Block seamless_dark_oak_log;
    public static Block seamless_smooth_sandstone;
    public static Block seamless_smooth_red_sandstone;
    public static Block invisible_pressure_plate;
    public static Block glowing_barrier;
    public static Block glowing_air;
    public static Block block_of_death;
    //public static Block crusher;
    public static BlockBush yellow_tulip;
    public static BlockBush blue_tulip;
    public static BlockBush black_tulip;
    public static BlockBush green_tulip;
    public static BlockBush purple_tulip;
    public static Block null_block;
    public static Block scaffolding_block;
    public static Block colour_changing_wool;
    public static Block colour_changing_clay;
    public static Block colour_changing_glass;
    public static Block basalt;
    public static Block basalt_bricks;
    public static Block polished_basalt;
    public static Block polished_stone;
    public static Block granite_bricks;
    public static Block andesite_bricks;
    public static Block diorite_bricks;
    public static Block sandy_bricks;
    public static Block sandy_stone_bricks;
    public static Block dark_nether_bricks;
    public static Item wooden_pattern;
    public static Item wooden_pattern_bars;
    public static Item wooden_pattern_trapdoor;
    public static Item wooden_pattern_button;
    public static Item wooden_pattern_pressure_plate;
    public static Item wooden_pattern_wall;
    public static Item wooden_pattern_fence;
    public static Item wooden_pattern_fence_gate;
    public static Item wooden_pattern_stairs;


    public static void createBlocksAndItems() {

        death_block = (new DamageSource("deathBlock")).setDamageBypassesArmor().setDamageIsAbsolute();
        amethyst_ore = (new SimpleBlock(Material.ROCK, SoundType.METAL, "pickaxe", 3, MapColor.STONE)).setTranslationKey("amethyst_ore").setCreativeTab(creativeTabWorld).setHardness(5.5F).setResistance(30.0F);
        jade_ore = (new SimpleBlock(Material.ROCK, SoundType.METAL, "pickaxe", 3, MapColor.STONE)).setTranslationKey("jade_ore").setCreativeTab(creativeTabWorld).setHardness(5.5F).setResistance(30.0F);
        copper_ore = (new SimpleBlock(Material.ROCK, SoundType.METAL, "pickaxe", 1, MapColor.STONE)).setTranslationKey("copper_ore").setCreativeTab(creativeTabWorld).setHardness(4.5F).setResistance(25.0F);
        tin_ore = (new SimpleBlock(Material.ROCK, SoundType.METAL, "pickaxe", 1, MapColor.STONE)).setTranslationKey("tin_ore").setCreativeTab(creativeTabWorld).setHardness(4.5F).setResistance(25.0F);
        amethyst_block = (new SimpleBlock(Material.ROCK, SoundType.METAL, "pickaxe", 3, MapColor.PURPLE)).setTranslationKey("amethyst_block").setCreativeTab(creativeTabBuilding).setHardness(6.0F).setResistance(35.0F);
        jade_block = (new SimpleBlock(Material.ROCK, SoundType.METAL, "pickaxe", 3, MapColor.EMERALD)).setTranslationKey("jade_block").setCreativeTab(creativeTabBuilding).setHardness(6.0F).setResistance(35.0F);
        copper_block = (new SimpleBlock(Material.ROCK, SoundType.METAL, "pickaxe", 1, MapColor.RED)).setTranslationKey("copper_block").setCreativeTab(creativeTabBuilding).setHardness(5.0F).setResistance(30.0F);
        tin_block = (new SimpleBlock(Material.ROCK, SoundType.METAL, "pickaxe", 1, MapColor.IRON)).setTranslationKey("tin_block").setCreativeTab(creativeTabBuilding).setHardness(5.0F).setResistance(30.0F);
        bronze_block = (new SimpleBlock(Material.ROCK, SoundType.METAL, "pickaxe", 2, MapColor.RED)).setTranslationKey("bronze_block").setCreativeTab(creativeTabBuilding).setHardness(5.0F).setResistance(30.0F);
        amethyst = (new Item()).setTranslationKey("amethyst").setCreativeTab(creativeTab);
        jade = (new Item()).setTranslationKey("jade").setCreativeTab(creativeTab);
        copper_ingot = (new Item()).setTranslationKey("copper_ingot").setCreativeTab(creativeTab);
        tin_ingot = (new Item()).setTranslationKey("tin_ingot").setCreativeTab(creativeTab);
        bronze_ingot = (new Item()).setTranslationKey("bronze_ingot").setCreativeTab(creativeTab);
        //iron_chest = (new IronChest(Material.field_151573_f)).setTranslationKey("iron_chest").setCreativeTab(creativeTabWorkInProgress);
        copper_door = (new SimpleBlock(Material.ROCK, SoundType.METAL, "pickaxe", 1, MapColor.RED)).setTranslationKey("copper_door").setHardness(5.0F).setResistance(30.0F);
        tin_door = (new SimpleBlock(Material.ROCK, SoundType.METAL, "pickaxe", 1, MapColor.IRON)).setTranslationKey("tin_door").setHardness(5.0F).setResistance(30.0F);
        bronze_door = (new SimpleBlock(Material.ROCK, SoundType.METAL, "pickaxe", 2, MapColor.RED)).setTranslationKey("bronze_door").setHardness(5.0F).setResistance(30.0F);
        amethyst_door = (new SimpleBlock(Material.ROCK, SoundType.METAL, "pickaxe", 3, MapColor.PURPLE)).setTranslationKey("amethyst_door").setHardness(6.0F).setResistance(35.0F);
        copper_door_item = (new Item()).setTranslationKey("copper_door_item").setCreativeTab(creativeTabBuilding);
        tin_door_item = (new Item()).setTranslationKey("tin_door_item").setCreativeTab(creativeTabBuilding);
        bronze_door_item = (new Item()).setTranslationKey("bronze_door_item").setCreativeTab(creativeTabBuilding);
        amethyst_door_item = (new Item()).setTranslationKey("amethyst_door_item").setCreativeTab(creativeTabBuilding);
        diamond_pressure_plate = (new PressurePlate(Material.ROCK, SoundType.METAL, "pickaxe", 2)).setTranslationKey("diamond_pressure_plate").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        copper_pressure_plate = (new PressurePlate(Material.ROCK, SoundType.METAL, "pickaxe", 1)).setTranslationKey("copper_pressure_plate").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        tin_pressure_plate = (new PressurePlate(Material.ROCK, SoundType.METAL, "pickaxe", 1)).setTranslationKey("tin_pressure_plate").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        bronze_pressure_plate = (new PressurePlate(Material.ROCK, SoundType.METAL, "pickaxe", 2)).setTranslationKey("bronze_pressure_plate").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        jade_pressure_plate = (new PressurePlate(Material.ROCK, SoundType.METAL, "pickaxe", 3)).setTranslationKey("jade_pressure_plate").setHardness(6.0F).setResistance(35.0F).setCreativeTab(creativeTabBuilding);
        amethyst_pressure_plate = (new PressurePlate(Material.ROCK, SoundType.METAL, "pickaxe", 3)).setTranslationKey("amethyst_pressure_plate").setHardness(6.0F).setResistance(35.0F).setCreativeTab(creativeTabBuilding);
        emerald_pressure_plate = (new PressurePlate(Material.ROCK, SoundType.METAL, "pickaxe", 2)).setTranslationKey("emerald_pressure_plate").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        quartz_pressure_plate = (new PressurePlate(Material.ROCK, SoundType.METAL, "pickaxe", 0)).setTranslationKey("quartz_pressure_plate").setHardness(0.8F).setResistance(4.0F).setCreativeTab(creativeTabBuilding);
        stone_bars = (new Bars(Material.ROCK, SoundType.STONE, "pickaxe", 0, true)).setTranslationKey("stone_bars").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        gold_bars = (new Bars(Material.ROCK, SoundType.METAL, "pickaxe", 1, true)).setTranslationKey("gold_bars").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        diamond_bars = (new Bars(Material.ROCK, SoundType.METAL, "pickaxe", 2, true)).setTranslationKey("diamond_bars").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        copper_bars = (new Bars(Material.ROCK, SoundType.METAL, "pickaxe", 1, true)).setTranslationKey("copper_bars").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        tin_bars = (new Bars(Material.ROCK, SoundType.METAL, "pickaxe", 1, true)).setTranslationKey("tin_bars").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        bronze_bars = (new Bars(Material.ROCK, SoundType.METAL, "pickaxe", 2, true)).setTranslationKey("bronze_bars").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        jade_bars = (new Bars(Material.ROCK, SoundType.METAL, "pickaxe", 3, true)).setTranslationKey("jade_bars").setHardness(6.0F).setResistance(35.0F).setCreativeTab(creativeTabBuilding);
        amethyst_bars = (new Bars(Material.ROCK, SoundType.METAL, "pickaxe", 3, true)).setTranslationKey("amethyst_bars").setHardness(6.0F).setResistance(35.0F).setCreativeTab(creativeTabBuilding);
        emerald_bars = (new Bars(Material.ROCK, SoundType.METAL, "pickaxe", 2, true)).setTranslationKey("emerald_bars").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        quartz_bars = (new Bars(Material.ROCK, SoundType.METAL, "pickaxe", 0, true)).setTranslationKey("quartz_bars").setHardness(0.8F).setResistance(4.0F).setCreativeTab(creativeTabBuilding);
        stone_trapdoor = (new ModTrapDoor(Material.ROCK, SoundType.STONE, "pickaxe", 0)).setTranslationKey("stone_trapdoor").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        gold_trapdoor = (new ModTrapDoor(Material.ROCK, SoundType.METAL, "pickaxe", 1)).setTranslationKey("gold_trapdoor").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        diamond_trapdoor = (new ModTrapDoor(Material.ROCK, SoundType.METAL, "pickaxe", 2)).setTranslationKey("diamond_trapdoor").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        copper_trapdoor = (new ModTrapDoor(Material.ROCK, SoundType.METAL, "pickaxe", 1)).setTranslationKey("copper_trapdoor").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        tin_trapdoor = (new ModTrapDoor(Material.ROCK, SoundType.METAL, "pickaxe", 1)).setTranslationKey("tin_trapdoor").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        bronze_trapdoor = (new ModTrapDoor(Material.ROCK, SoundType.METAL, "pickaxe", 2)).setTranslationKey("bronze_trapdoor").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        jade_trapdoor = (new ModTrapDoor(Material.ROCK, SoundType.METAL, "pickaxe", 3)).setTranslationKey("jade_trapdoor").setHardness(6.0F).setResistance(35.0F).setCreativeTab(creativeTabBuilding);
        amethyst_trapdoor = (new ModTrapDoor(Material.ROCK, SoundType.METAL, "pickaxe", 3)).setTranslationKey("amethyst_trapdoor").setHardness(6.0F).setResistance(35.0F).setCreativeTab(creativeTabBuilding);
        emerald_trapdoor = (new ModTrapDoor(Material.ROCK, SoundType.METAL, "pickaxe", 2)).setTranslationKey("emerald_trapdoor").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        quartz_trapdoor = (new ModTrapDoor(Material.ROCK, SoundType.METAL, "pickaxe", 0)).setTranslationKey("quartz_trapdoor").setHardness(0.8F).setResistance(4.0F).setCreativeTab(creativeTabBuilding);
        iron_button = (new Button(false, SoundType.METAL, "pickaxe", 1)).setTranslationKey("iron_button").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        gold_button = (new Button(false, SoundType.METAL, "pickaxe", 1)).setTranslationKey("gold_button").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        diamond_button = (new Button(false, SoundType.METAL, "pickaxe", 2)).setTranslationKey("diamond_button").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        copper_button = (new Button(false, SoundType.METAL, "pickaxe", 1)).setTranslationKey("copper_button").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        tin_button = (new Button(false, SoundType.METAL, "pickaxe", 1)).setTranslationKey("tin_button").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        bronze_button = (new Button(false, SoundType.METAL, "pickaxe", 2)).setTranslationKey("bronze_button").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        jade_button = (new Button(false, SoundType.METAL, "pickaxe", 3)).setTranslationKey("jade_button").setHardness(6.0F).setResistance(35.0F).setCreativeTab(creativeTabBuilding);
        amethyst_button = (new Button(false, SoundType.METAL, "pickaxe", 3)).setTranslationKey("amethyst_button").setHardness(6.0F).setResistance(35.0F).setCreativeTab(creativeTabBuilding);
        emerald_button = (new Button(false, SoundType.METAL, "pickaxe", 2)).setTranslationKey("emerald_button").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        quartz_button = (new Button(false, SoundType.METAL, "pickaxe", 0)).setTranslationKey("quartz_button").setHardness(0.8F).setResistance(4.0F).setCreativeTab(creativeTabBuilding);
        colour_block_white = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.IRON)).setTranslationKey("colour_block_white").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        colour_block_light_gray = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.GRAY)).setTranslationKey("colour_block_light_gray").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        colour_block_gray = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.GRAY)).setTranslationKey("colour_block_gray").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        colour_block_black = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.BLACK)).setTranslationKey("colour_block_black").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        colour_block_light_blue = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.LIGHT_BLUE)).setTranslationKey("colour_block_light_blue").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        colour_block_cyan = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.CYAN)).setTranslationKey("colour_block_cyan").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        colour_block_blue = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.BLUE)).setTranslationKey("colour_block_blue").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        colour_block_light_green = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.GREEN)).setTranslationKey("colour_block_light_green").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        colour_block_green = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.GREEN)).setTranslationKey("colour_block_green").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        colour_block_yellow = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.YELLOW)).setTranslationKey("colour_block_yellow").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        colour_block_orange = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.RED)).setTranslationKey("colour_block_orange").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        colour_block_brown = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.BROWN)).setTranslationKey("colour_block_brown").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        colour_block_magenta = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.MAGENTA)).setTranslationKey("colour_block_magenta").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        colour_block_purple = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.PURPLE)).setTranslationKey("colour_block_purple").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        colour_block_red = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.RED)).setTranslationKey("colour_block_red").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        colour_block_pink = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.PINK)).setTranslationKey("colour_block_pink").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        colour_changing_block = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.BLACK)).setTranslationKey("colour_changing_block").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_colour_block_white = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.IRON)).setTranslationKey("glowing_colour_block_white").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_colour_block_light_gray = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.GRAY)).setTranslationKey("glowing_colour_block_light_gray").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_colour_block_gray = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.GRAY)).setTranslationKey("glowing_colour_block_gray").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_colour_block_black = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.BLACK)).setTranslationKey("glowing_colour_block_black").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_colour_block_light_blue = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.LIGHT_BLUE)).setTranslationKey("glowing_colour_block_light_blue").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_colour_block_cyan = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.CYAN)).setTranslationKey("glowing_colour_block_cyan").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_colour_block_blue = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.BLUE)).setTranslationKey("glowing_colour_block_blue").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_colour_block_light_green = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.GREEN)).setTranslationKey("glowing_colour_block_light_green").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_colour_block_green = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.GREEN)).setTranslationKey("glowing_colour_block_green").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_colour_block_yellow = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.YELLOW)).setTranslationKey("glowing_colour_block_yellow").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_colour_block_orange = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.RED)).setTranslationKey("glowing_colour_block_orange").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_colour_block_brown = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.BROWN)).setTranslationKey("glowing_colour_block_brown").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_colour_block_magenta = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.MAGENTA)).setTranslationKey("glowing_colour_block_magenta").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_colour_block_purple = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.PURPLE)).setTranslationKey("glowing_colour_block_purple").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_colour_block_red = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.RED)).setTranslationKey("glowing_colour_block_red").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_colour_block_pink = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.PINK)).setTranslationKey("glowing_colour_block_pink").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_colour_changing_block = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 2, MapColor.BLACK)).setTranslationKey("glowing_colour_changing_block").setHardness(5.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_bricks_white = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.IRON)).setTranslationKey("coloured_stone_bricks_white").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_bricks_light_gray = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.GRAY)).setTranslationKey("coloured_stone_bricks_light_gray").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_bricks_gray = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.GRAY)).setTranslationKey("coloured_stone_bricks_gray").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_bricks_black = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BLACK)).setTranslationKey("coloured_stone_bricks_black").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_bricks_light_blue = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.LIGHT_BLUE)).setTranslationKey("coloured_stone_bricks_light_blue").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_bricks_cyan = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.CYAN)).setTranslationKey("coloured_stone_bricks_cyan").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_bricks_blue = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BLUE)).setTranslationKey("coloured_stone_bricks_blue").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_bricks_light_green = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.GREEN)).setTranslationKey("coloured_stone_bricks_light_green").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_bricks_green = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.GREEN)).setTranslationKey("coloured_stone_bricks_green").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_bricks_yellow = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.YELLOW)).setTranslationKey("coloured_stone_bricks_yellow").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_bricks_orange = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.RED)).setTranslationKey("coloured_stone_bricks_orange").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_bricks_brown = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BROWN)).setTranslationKey("coloured_stone_bricks_brown").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_bricks_magenta = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.MAGENTA)).setTranslationKey("coloured_stone_bricks_magenta").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_bricks_purple = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.PURPLE)).setTranslationKey("coloured_stone_bricks_purple").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_bricks_red = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.RED)).setTranslationKey("coloured_stone_bricks_red").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_bricks_pink = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.PINK)).setTranslationKey("coloured_stone_bricks_pink").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        colour_changing_stone_bricks = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BLACK)).setTranslationKey("colour_changing_stone_bricks").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_bricks_white = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.IRON)).setTranslationKey("glowing_coloured_stone_bricks_white").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_bricks_light_gray = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.GRAY)).setTranslationKey("glowing_coloured_stone_bricks_light_gray").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_bricks_gray = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.GRAY)).setTranslationKey("glowing_coloured_stone_bricks_gray").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_bricks_black = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BLACK)).setTranslationKey("glowing_coloured_stone_bricks_black").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_bricks_light_blue = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.LIGHT_BLUE)).setTranslationKey("glowing_coloured_stone_bricks_light_blue").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_bricks_cyan = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.CYAN)).setTranslationKey("glowing_coloured_stone_bricks_cyan").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_bricks_blue = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BLUE)).setTranslationKey("glowing_coloured_stone_bricks_blue").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_bricks_light_green = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.GREEN)).setTranslationKey("glowing_coloured_stone_bricks_light_green").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_bricks_green = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.GREEN)).setTranslationKey("glowing_coloured_stone_bricks_green").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_bricks_yellow = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.YELLOW)).setTranslationKey("glowing_coloured_stone_bricks_yellow").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_bricks_orange = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.RED)).setTranslationKey("glowing_coloured_stone_bricks_orange").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_bricks_brown = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BROWN)).setTranslationKey("glowing_coloured_stone_bricks_brown").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_bricks_magenta = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.MAGENTA)).setTranslationKey("glowing_coloured_stone_bricks_magenta").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_bricks_purple = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.PURPLE)).setTranslationKey("glowing_coloured_stone_bricks_purple").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_bricks_red = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.RED)).setTranslationKey("glowing_coloured_stone_bricks_red").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_bricks_pink = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.PINK)).setTranslationKey("glowing_coloured_stone_bricks_pink").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_colour_changing_stone_bricks = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BLACK)).setTranslationKey("glowing_colour_changing_stone_bricks").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_white = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.IRON)).setTranslationKey("coloured_stone_white").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_light_gray = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.GRAY)).setTranslationKey("coloured_stone_light_gray").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_gray = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.GRAY)).setTranslationKey("coloured_stone_gray").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_black = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BLACK)).setTranslationKey("coloured_stone_black").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_light_blue = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.LIGHT_BLUE)).setTranslationKey("coloured_stone_light_blue").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_cyan = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.CYAN)).setTranslationKey("coloured_stone_cyan").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_blue = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BLUE)).setTranslationKey("coloured_stone_blue").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_light_green = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.GREEN)).setTranslationKey("coloured_stone_light_green").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_green = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.GREEN)).setTranslationKey("coloured_stone_green").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_yellow = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.YELLOW)).setTranslationKey("coloured_stone_yellow").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_orange = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.RED)).setTranslationKey("coloured_stone_orange").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_brown = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BROWN)).setTranslationKey("coloured_stone_brown").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_magenta = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.MAGENTA)).setTranslationKey("coloured_stone_magenta").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_purple = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.PURPLE)).setTranslationKey("coloured_stone_purple").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_red = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.RED)).setTranslationKey("coloured_stone_red").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_stone_pink = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.PINK)).setTranslationKey("coloured_stone_pink").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        colour_changing_stone = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BLACK)).setTranslationKey("colour_changing_stone").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_white = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.IRON)).setTranslationKey("glowing_coloured_stone_white").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_light_gray = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.GRAY)).setTranslationKey("glowing_coloured_stone_light_gray").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_gray = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.GRAY)).setTranslationKey("glowing_coloured_stone_gray").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_black = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BLACK)).setTranslationKey("glowing_coloured_stone_black").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_light_blue = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.LIGHT_BLUE)).setTranslationKey("glowing_coloured_stone_light_blue").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_cyan = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.CYAN)).setTranslationKey("glowing_coloured_stone_cyan").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_blue = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BLUE)).setTranslationKey("glowing_coloured_stone_blue").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_light_green = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.GREEN)).setTranslationKey("glowing_coloured_stone_light_green").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_green = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.GREEN)).setTranslationKey("glowing_coloured_stone_green").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_yellow = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.YELLOW)).setTranslationKey("glowing_coloured_stone_yellow").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_orange = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.RED)).setTranslationKey("glowing_coloured_stone_orange").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_brown = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BROWN)).setTranslationKey("glowing_coloured_stone_brown").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_magenta = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.MAGENTA)).setTranslationKey("glowing_coloured_stone_magenta").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_purple = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.PURPLE)).setTranslationKey("glowing_coloured_stone_purple").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_red = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.RED)).setTranslationKey("glowing_coloured_stone_red").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_stone_pink = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.PINK)).setTranslationKey("glowing_coloured_stone_pink").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_colour_changing_stone = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BLACK)).setTranslationKey("glowing_colour_changing_stone").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_cobblestone_white = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.IRON)).setTranslationKey("coloured_cobblestone_white").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_cobblestone_light_gray = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.GRAY)).setTranslationKey("coloured_cobblestone_light_gray").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_cobblestone_gray = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.GRAY)).setTranslationKey("coloured_cobblestone_gray").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_cobblestone_black = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BLACK)).setTranslationKey("coloured_cobblestone_black").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_cobblestone_light_blue = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.LIGHT_BLUE)).setTranslationKey("coloured_cobblestone_light_blue").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_cobblestone_cyan = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.CYAN)).setTranslationKey("coloured_cobblestone_cyan").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_cobblestone_blue = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BLUE)).setTranslationKey("coloured_cobblestone_blue").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_cobblestone_light_green = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.GREEN)).setTranslationKey("coloured_cobblestone_light_green").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_cobblestone_green = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.GREEN)).setTranslationKey("coloured_cobblestone_green").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_cobblestone_yellow = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.YELLOW)).setTranslationKey("coloured_cobblestone_yellow").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_cobblestone_orange = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.RED)).setTranslationKey("coloured_cobblestone_orange").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_cobblestone_brown = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BROWN)).setTranslationKey("coloured_cobblestone_brown").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_cobblestone_magenta = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.MAGENTA)).setTranslationKey("coloured_cobblestone_magenta").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_cobblestone_purple = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.PURPLE)).setTranslationKey("coloured_cobblestone_purple").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_cobblestone_red = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.RED)).setTranslationKey("coloured_cobblestone_red").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        coloured_cobblestone_pink = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.PINK)).setTranslationKey("coloured_cobblestone_pink").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        colour_changing_cobblestone = (new ColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BLACK)).setTranslationKey("colour_changing_cobblestone").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_cobblestone_white = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.IRON)).setTranslationKey("glowing_coloured_cobblestone_white").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_cobblestone_light_gray = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.GRAY)).setTranslationKey("glowing_coloured_cobblestone_light_gray").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_cobblestone_gray = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.GRAY)).setTranslationKey("glowing_coloured_cobblestone_gray").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_cobblestone_black = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BLACK)).setTranslationKey("glowing_coloured_cobblestone_black").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_cobblestone_light_blue = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.LIGHT_BLUE)).setTranslationKey("glowing_coloured_cobblestone_light_blue").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_cobblestone_cyan = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.CYAN)).setTranslationKey("glowing_coloured_cobblestone_cyan").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_cobblestone_blue = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BLUE)).setTranslationKey("glowing_coloured_cobblestone_blue").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_cobblestone_light_green = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.GREEN)).setTranslationKey("glowing_coloured_cobblestone_light_green").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_cobblestone_green = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.GREEN)).setTranslationKey("glowing_coloured_cobblestone_green").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_cobblestone_yellow = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.YELLOW)).setTranslationKey("glowing_coloured_cobblestone_yellow").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_cobblestone_orange = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.RED)).setTranslationKey("glowing_coloured_cobblestone_orange").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_cobblestone_brown = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BROWN)).setTranslationKey("glowing_coloured_cobblestone_brown").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_cobblestone_magenta = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.MAGENTA)).setTranslationKey("glowing_coloured_cobblestone_magenta").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_cobblestone_purple = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.PURPLE)).setTranslationKey("glowing_coloured_cobblestone_purple").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_cobblestone_red = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.RED)).setTranslationKey("glowing_coloured_cobblestone_red").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_coloured_cobblestone_pink = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.PINK)).setTranslationKey("glowing_coloured_cobblestone_pink").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        glowing_colour_changing_cobblestone = (new GlowingColorBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BLACK)).setTranslationKey("glowing_colour_changing_cobblestone").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        seamless_stone_slab = (new SimpleBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.STONE)).setTranslationKey("seamless_stone_slab").setCreativeTab(creativeTabBuilding).setResistance(30.0F).setHardness(2.0F);
        seamless_oak_log = (new SimpleBlock(Material.WOOD, SoundType.WOOD, "axe", 0, MapColor.WOOD)).setTranslationKey("seamless_oak_log").setCreativeTab(creativeTabBuilding).setResistance(10.0F).setHardness(2.0F);
        seamless_birch_log = (new SimpleBlock(Material.WOOD, SoundType.WOOD, "axe", 0, MapColor.WOOD)).setTranslationKey("seamless_birch_log").setCreativeTab(creativeTabBuilding).setResistance(10.0F).setHardness(2.0F);
        seamless_spruce_log = (new SimpleBlock(Material.WOOD, SoundType.WOOD, "axe", 0, MapColor.WOOD)).setTranslationKey("seamless_spruce_log").setCreativeTab(creativeTabBuilding).setResistance(10.0F).setHardness(2.0F);
        seamless_jungle_log = (new SimpleBlock(Material.WOOD, SoundType.WOOD, "axe", 0, MapColor.WOOD)).setTranslationKey("seamless_jungle_log").setCreativeTab(creativeTabBuilding).setResistance(10.0F).setHardness(2.0F);
        seamless_acacia_log = (new SimpleBlock(Material.WOOD, SoundType.WOOD, "axe", 0, MapColor.WOOD)).setTranslationKey("seamless_acacia_log").setCreativeTab(creativeTabBuilding).setResistance(10.0F).setHardness(2.0F);
        seamless_dark_oak_log = (new SimpleBlock(Material.WOOD, SoundType.WOOD, "axe", 0, MapColor.WOOD)).setTranslationKey("seamless_dark_oak_log").setCreativeTab(creativeTabBuilding).setResistance(10.0F).setHardness(2.0F);
        seamless_smooth_sandstone = (new SimpleBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.SAND)).setTranslationKey("seamless_smooth_sandstone").setCreativeTab(creativeTabBuilding).setResistance(4.0F).setHardness(0.8F);
        seamless_smooth_red_sandstone = (new SimpleBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.RED)).setTranslationKey("seamless_smooth_red_sandstone").setCreativeTab(creativeTabBuilding).setResistance(4.0F).setHardness(0.8F);
        invisible_pressure_plate = (new PressurePlate(Material.BARRIER, true, true)).setCreativeTab(creativeTabMapMaking).setResistance(1.8E7F).setTranslationKey("invisible_pressure_plate");
        glowing_barrier = (new SimpleBlock(Material.BARRIER, SoundType.GLASS, "pickaxe", 0, true, 1.0F, true)).setResistance(1.8E7F).setCreativeTab(creativeTabMapMaking).setTranslationKey("glowing_barrier");
        glowing_air = (new GlowingAir(Material.BARRIER)).setResistance(1.8E7F).setCreativeTab(creativeTabMapMaking).setTranslationKey("glowing_air");
        block_of_death = (new DeathBlock(Material.ROCK)).setCreativeTab(creativeTabMapMaking).setTranslationKey("block_of_death").setResistance(10.0F).setHardness(5.0F);
        //crusher = (new Crusher()).setTranslationKey("crusher").setCreativeTab(creativeTabWorkInProgress).setResistance(30.0F).setHardness(5.0F);
        yellow_tulip = (BlockBush)(new Flower()).setTranslationKey("yellow_tulip").setCreativeTab(creativeTabWorld);
        blue_tulip = (BlockBush)(new Flower()).setTranslationKey("blue_tulip").setCreativeTab(creativeTabWorld);
        black_tulip = (BlockBush)(new Flower()).setTranslationKey("black_tulip").setCreativeTab(creativeTabWorld);
        green_tulip = (BlockBush)(new Flower()).setTranslationKey("green_tulip").setCreativeTab(creativeTabWorld);
        purple_tulip = (BlockBush)(new Flower()).setTranslationKey("purple_tulip").setCreativeTab(creativeTabWorld);
        null_block = (new Block(Material.BARRIER)).setBlockUnbreakable().setTranslationKey("null_block").setResistance(1000000.0F).setCreativeTab(creativeTabBuilding);
        scaffolding_block = (new SimpleBlock(Material.GROUND, SoundType.WOOD, true, MapColor.WOOD)).setTranslationKey("scaffolding_block").setCreativeTab(creativeTabBuilding);
        colour_changing_wool = (new ColorBlock(Material.CLOTH, SoundType.CLOTH, (String)null, 0, MapColor.CLOTH)).setTranslationKey("colour_changing_wool").setHardness(0.8F).setResistance(4.0F).setCreativeTab(creativeTabBuilding);
        colour_changing_clay = (new ColorBlock(Material.CLAY, SoundType.STONE, "pickaxe", 0, MapColor.CLAY)).setTranslationKey("colour_changing_clay").setHardness(1.25F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        colour_changing_glass = (new ColorChangingClass(Material.GLASS, SoundType.GLASS, MapColor.AIR)).setTranslationKey("colour_changing_glass").setHardness(0.3F).setResistance(1.5F).setCreativeTab(creativeTabBuilding);
        basalt = (new SimpleBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BLACK)).setTranslationKey("basalt").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        basalt_bricks = (new SimpleBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BLACK)).setTranslationKey("basalt_bricks").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        polished_basalt = (new SimpleBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BLACK)).setTranslationKey("polished_basalt").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        polished_stone = (new SimpleBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.STONE)).setTranslationKey("polished_stone").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        granite_bricks = (new SimpleBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.RED)).setTranslationKey("granite_bricks").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        andesite_bricks = (new SimpleBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.STONE)).setTranslationKey("andesite_bricks").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        diorite_bricks = (new SimpleBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.IRON)).setTranslationKey("diorite_bricks").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        sandy_bricks = (new SimpleBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.SAND)).setTranslationKey("sandy_bricks").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        sandy_stone_bricks = (new SimpleBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.SAND)).setTranslationKey("sandy_stone_bricks").setHardness(1.5F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        dark_nether_bricks = (new SimpleBlock(Material.ROCK, SoundType.STONE, "pickaxe", 0, MapColor.BLACK)).setTranslationKey("dark_nether_bricks").setHardness(2.0F).setResistance(30.0F).setCreativeTab(creativeTabBuilding);
        wooden_pattern = (new Item()).setTranslationKey("wooden_pattern").setCreativeTab(creativeTab);
        wooden_pattern_bars = (new Item()).setTranslationKey("wooden_pattern_bars").setCreativeTab(creativeTab);
        wooden_pattern_button = (new Item()).setTranslationKey("wooden_pattern_button").setCreativeTab(creativeTab);
        wooden_pattern_pressure_plate = (new Item()).setTranslationKey("wooden_pattern_pressure_plate").setCreativeTab(creativeTab);
        wooden_pattern_trapdoor = (new Item()).setTranslationKey("wooden_pattern_trapdoor").setCreativeTab(creativeTab);
        wooden_pattern_wall = (new Item()).setTranslationKey("wooden_pattern_wall").setCreativeTab(creativeTab);
        wooden_pattern_fence = (new Item()).setTranslationKey("wooden_pattern_fence").setCreativeTab(creativeTab);
        wooden_pattern_fence_gate = (new Item()).setTranslationKey("wooden_pattern_fence_gate").setCreativeTab(creativeTab);
        wooden_pattern_stairs = (new Item()).setTranslationKey("wooden_pattern_stairs").setCreativeTab(creativeTab);
    }

    public static void registerItemsAndBlocks() {

        Registry.registerBlock(amethyst_ore, amethyst_ore.getTranslationKey().substring(5));
        Registry.registerBlock(jade_ore, jade_ore.getTranslationKey().substring(5));
        Registry.registerBlock(copper_ore, copper_ore.getTranslationKey().substring(5));
        Registry.registerBlock(tin_ore, tin_ore.getTranslationKey().substring(5));
        Registry.registerBlock(amethyst_block, amethyst_block.getTranslationKey().substring(5));
        Registry.registerBlock(jade_block, jade_block.getTranslationKey().substring(5));
        Registry.registerBlock(copper_block, copper_block.getTranslationKey().substring(5));
        Registry.registerBlock(tin_block, tin_block.getTranslationKey().substring(5));
        Registry.registerBlock(bronze_block, bronze_block.getTranslationKey().substring(5));
        Registry.registerItem(amethyst, amethyst.getTranslationKey().substring(5));
        Registry.registerItem(jade, jade.getTranslationKey().substring(5));
        Registry.registerItem(copper_ingot, copper_ingot.getTranslationKey().substring(5));
        Registry.registerItem(tin_ingot, tin_ingot.getTranslationKey().substring(5));
        Registry.registerItem(bronze_ingot, bronze_ingot.getTranslationKey().substring(5));
        //Registry.registerBlock(iron_chest, iron_chest.getTranslationKey().substring(5));

        Registry.registerBlock(diamond_pressure_plate, diamond_pressure_plate.getTranslationKey().substring(5));
        Registry.registerBlock(copper_pressure_plate, copper_pressure_plate.getTranslationKey().substring(5));
        Registry.registerBlock(tin_pressure_plate, tin_pressure_plate.getTranslationKey().substring(5));
        Registry.registerBlock(bronze_pressure_plate, bronze_pressure_plate.getTranslationKey().substring(5));
        Registry.registerBlock(amethyst_pressure_plate, amethyst_pressure_plate.getTranslationKey().substring(5));
        Registry.registerBlock(jade_pressure_plate, jade_pressure_plate.getTranslationKey().substring(5));
        Registry.registerBlock(emerald_pressure_plate, emerald_pressure_plate.getTranslationKey().substring(5));
        Registry.registerBlock(quartz_pressure_plate, quartz_pressure_plate.getTranslationKey().substring(5));
        Registry.registerBlock(stone_bars, stone_bars.getTranslationKey().substring(5));
        Registry.registerBlock(gold_bars, gold_bars.getTranslationKey().substring(5));
        Registry.registerBlock(diamond_bars, diamond_bars.getTranslationKey().substring(5));
        Registry.registerBlock(copper_bars, copper_bars.getTranslationKey().substring(5));
        Registry.registerBlock(tin_bars, tin_bars.getTranslationKey().substring(5));
        Registry.registerBlock(bronze_bars, bronze_bars.getTranslationKey().substring(5));
        Registry.registerBlock(amethyst_bars, amethyst_bars.getTranslationKey().substring(5));
        Registry.registerBlock(jade_bars, jade_bars.getTranslationKey().substring(5));
        Registry.registerBlock(emerald_bars, emerald_bars.getTranslationKey().substring(5));
        Registry.registerBlock(quartz_bars, quartz_bars.getTranslationKey().substring(5));
        Registry.registerBlock(stone_trapdoor, stone_trapdoor.getTranslationKey().substring(5));
        Registry.registerBlock(gold_trapdoor, gold_trapdoor.getTranslationKey().substring(5));
        Registry.registerBlock(diamond_trapdoor, diamond_trapdoor.getTranslationKey().substring(5));
        Registry.registerBlock(copper_trapdoor, copper_trapdoor.getTranslationKey().substring(5));
        Registry.registerBlock(tin_trapdoor, tin_trapdoor.getTranslationKey().substring(5));
        Registry.registerBlock(bronze_trapdoor, bronze_trapdoor.getTranslationKey().substring(5));
        Registry.registerBlock(amethyst_trapdoor, amethyst_trapdoor.getTranslationKey().substring(5));
        Registry.registerBlock(jade_trapdoor, jade_trapdoor.getTranslationKey().substring(5));
        Registry.registerBlock(emerald_trapdoor, emerald_trapdoor.getTranslationKey().substring(5));
        Registry.registerBlock(quartz_trapdoor, quartz_trapdoor.getTranslationKey().substring(5));
        Registry.registerBlock(iron_button, iron_button.getTranslationKey().substring(5));
        Registry.registerBlock(gold_button, gold_button.getTranslationKey().substring(5));
        Registry.registerBlock(diamond_button, diamond_button.getTranslationKey().substring(5));
        Registry.registerBlock(copper_button, copper_button.getTranslationKey().substring(5));
        Registry.registerBlock(tin_button, tin_button.getTranslationKey().substring(5));
        Registry.registerBlock(bronze_button, bronze_button.getTranslationKey().substring(5));
        Registry.registerBlock(amethyst_button, amethyst_button.getTranslationKey().substring(5));
        Registry.registerBlock(jade_button, jade_button.getTranslationKey().substring(5));
        Registry.registerBlock(emerald_button, emerald_button.getTranslationKey().substring(5));
        Registry.registerBlock(quartz_button, quartz_button.getTranslationKey().substring(5));
        Registry.registerBlock(colour_block_white, colour_block_white.getTranslationKey().substring(5));
        Registry.registerBlock(colour_block_light_gray, colour_block_light_gray.getTranslationKey().substring(5));
        Registry.registerBlock(colour_block_gray, colour_block_gray.getTranslationKey().substring(5));
        Registry.registerBlock(colour_block_black, colour_block_black.getTranslationKey().substring(5));
        Registry.registerBlock(colour_block_light_blue, colour_block_light_blue.getTranslationKey().substring(5));
        Registry.registerBlock(colour_block_cyan, colour_block_cyan.getTranslationKey().substring(5));
        Registry.registerBlock(colour_block_blue, colour_block_blue.getTranslationKey().substring(5));
        Registry.registerBlock(colour_block_light_green, colour_block_light_green.getTranslationKey().substring(5));
        Registry.registerBlock(colour_block_yellow, colour_block_yellow.getTranslationKey().substring(5));
        Registry.registerBlock(colour_block_orange, colour_block_orange.getTranslationKey().substring(5));
        Registry.registerBlock(colour_block_brown, colour_block_brown.getTranslationKey().substring(5));
        Registry.registerBlock(colour_block_magenta, colour_block_magenta.getTranslationKey().substring(5));
        Registry.registerBlock(colour_block_purple, colour_block_purple.getTranslationKey().substring(5));
        Registry.registerBlock(colour_block_red, colour_block_red.getTranslationKey().substring(5));
        Registry.registerBlock(colour_block_pink, colour_block_pink.getTranslationKey().substring(5));
        Registry.registerBlock(colour_block_green, colour_block_green.getTranslationKey().substring(5));
        Registry.registerBlock(colour_changing_block, colour_changing_block.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_colour_block_white, glowing_colour_block_white.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_colour_block_light_gray, glowing_colour_block_light_gray.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_colour_block_gray, glowing_colour_block_gray.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_colour_block_black, glowing_colour_block_black.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_colour_block_light_blue, glowing_colour_block_light_blue.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_colour_block_cyan, glowing_colour_block_cyan.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_colour_block_blue, glowing_colour_block_blue.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_colour_block_light_green, glowing_colour_block_light_green.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_colour_block_yellow, glowing_colour_block_yellow.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_colour_block_orange, glowing_colour_block_orange.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_colour_block_brown, glowing_colour_block_brown.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_colour_block_magenta, glowing_colour_block_magenta.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_colour_block_purple, glowing_colour_block_purple.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_colour_block_red, glowing_colour_block_red.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_colour_block_pink, glowing_colour_block_pink.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_colour_block_green, glowing_colour_block_green.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_colour_changing_block, glowing_colour_changing_block.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_bricks_white, coloured_stone_bricks_white.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_bricks_light_gray, coloured_stone_bricks_light_gray.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_bricks_gray, coloured_stone_bricks_gray.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_bricks_black, coloured_stone_bricks_black.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_bricks_light_blue, coloured_stone_bricks_light_blue.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_bricks_cyan, coloured_stone_bricks_cyan.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_bricks_blue, coloured_stone_bricks_blue.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_bricks_light_green, coloured_stone_bricks_light_green.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_bricks_yellow, coloured_stone_bricks_yellow.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_bricks_orange, coloured_stone_bricks_orange.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_bricks_brown, coloured_stone_bricks_brown.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_bricks_magenta, coloured_stone_bricks_magenta.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_bricks_purple, coloured_stone_bricks_purple.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_bricks_red, coloured_stone_bricks_red.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_bricks_pink, coloured_stone_bricks_pink.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_bricks_green, coloured_stone_bricks_green.getTranslationKey().substring(5));
        Registry.registerBlock(colour_changing_stone_bricks, colour_changing_stone_bricks.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_bricks_white, glowing_coloured_stone_bricks_white.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_bricks_light_gray, glowing_coloured_stone_bricks_light_gray.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_bricks_gray, glowing_coloured_stone_bricks_gray.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_bricks_black, glowing_coloured_stone_bricks_black.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_bricks_light_blue, glowing_coloured_stone_bricks_light_blue.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_bricks_cyan, glowing_coloured_stone_bricks_cyan.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_bricks_blue, glowing_coloured_stone_bricks_blue.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_bricks_light_green, glowing_coloured_stone_bricks_light_green.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_bricks_yellow, glowing_coloured_stone_bricks_yellow.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_bricks_orange, glowing_coloured_stone_bricks_orange.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_bricks_brown, glowing_coloured_stone_bricks_brown.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_bricks_magenta, glowing_coloured_stone_bricks_magenta.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_bricks_purple, glowing_coloured_stone_bricks_purple.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_bricks_red, glowing_coloured_stone_bricks_red.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_bricks_pink, glowing_coloured_stone_bricks_pink.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_bricks_green, glowing_coloured_stone_bricks_green.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_colour_changing_stone_bricks, glowing_colour_changing_stone_bricks.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_white, coloured_stone_white.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_light_gray, coloured_stone_light_gray.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_gray, coloured_stone_gray.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_black, coloured_stone_black.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_light_blue, coloured_stone_light_blue.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_cyan, coloured_stone_cyan.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_blue, coloured_stone_blue.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_light_green, coloured_stone_light_green.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_yellow, coloured_stone_yellow.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_orange, coloured_stone_orange.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_brown, coloured_stone_brown.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_magenta, coloured_stone_magenta.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_purple, coloured_stone_purple.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_red, coloured_stone_red.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_pink, coloured_stone_pink.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_stone_green, coloured_stone_green.getTranslationKey().substring(5));
        Registry.registerBlock(colour_changing_stone, colour_changing_stone.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_white, glowing_coloured_stone_white.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_light_gray, glowing_coloured_stone_light_gray.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_gray, glowing_coloured_stone_gray.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_black, glowing_coloured_stone_black.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_light_blue, glowing_coloured_stone_light_blue.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_cyan, glowing_coloured_stone_cyan.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_blue, glowing_coloured_stone_blue.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_light_green, glowing_coloured_stone_light_green.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_yellow, glowing_coloured_stone_yellow.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_orange, glowing_coloured_stone_orange.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_brown, glowing_coloured_stone_brown.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_magenta, glowing_coloured_stone_magenta.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_purple, glowing_coloured_stone_purple.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_red, glowing_coloured_stone_red.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_pink, glowing_coloured_stone_pink.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_stone_green, glowing_coloured_stone_green.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_colour_changing_stone, glowing_colour_changing_stone.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_cobblestone_white, coloured_cobblestone_white.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_cobblestone_light_gray, coloured_cobblestone_light_gray.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_cobblestone_gray, coloured_cobblestone_gray.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_cobblestone_black, coloured_cobblestone_black.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_cobblestone_light_blue, coloured_cobblestone_light_blue.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_cobblestone_cyan, coloured_cobblestone_cyan.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_cobblestone_blue, coloured_cobblestone_blue.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_cobblestone_light_green, coloured_cobblestone_light_green.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_cobblestone_yellow, coloured_cobblestone_yellow.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_cobblestone_orange, coloured_cobblestone_orange.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_cobblestone_brown, coloured_cobblestone_brown.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_cobblestone_magenta, coloured_cobblestone_magenta.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_cobblestone_purple, coloured_cobblestone_purple.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_cobblestone_red, coloured_cobblestone_red.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_cobblestone_pink, coloured_cobblestone_pink.getTranslationKey().substring(5));
        Registry.registerBlock(coloured_cobblestone_green, coloured_cobblestone_green.getTranslationKey().substring(5));
        Registry.registerBlock(colour_changing_cobblestone, colour_changing_cobblestone.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_cobblestone_white, glowing_coloured_cobblestone_white.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_cobblestone_light_gray, glowing_coloured_cobblestone_light_gray.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_cobblestone_gray, glowing_coloured_cobblestone_gray.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_cobblestone_black, glowing_coloured_cobblestone_black.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_cobblestone_light_blue, glowing_coloured_cobblestone_light_blue.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_cobblestone_cyan, glowing_coloured_cobblestone_cyan.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_cobblestone_blue, glowing_coloured_cobblestone_blue.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_cobblestone_light_green, glowing_coloured_cobblestone_light_green.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_cobblestone_yellow, glowing_coloured_cobblestone_yellow.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_cobblestone_orange, glowing_coloured_cobblestone_orange.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_cobblestone_brown, glowing_coloured_cobblestone_brown.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_cobblestone_magenta, glowing_coloured_cobblestone_magenta.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_cobblestone_purple, glowing_coloured_cobblestone_purple.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_cobblestone_red, glowing_coloured_cobblestone_red.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_cobblestone_pink, glowing_coloured_cobblestone_pink.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_coloured_cobblestone_green, glowing_coloured_cobblestone_green.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_colour_changing_cobblestone, glowing_colour_changing_cobblestone.getTranslationKey().substring(5));
        Registry.registerBlock(seamless_stone_slab, seamless_stone_slab.getTranslationKey().substring(5));
        Registry.registerBlock(seamless_oak_log, seamless_oak_log.getTranslationKey().substring(5));
        Registry.registerBlock(seamless_birch_log, seamless_birch_log.getTranslationKey().substring(5));
        Registry.registerBlock(seamless_spruce_log, seamless_spruce_log.getTranslationKey().substring(5));
        Registry.registerBlock(seamless_jungle_log, seamless_jungle_log.getTranslationKey().substring(5));
        Registry.registerBlock(seamless_acacia_log, seamless_acacia_log.getTranslationKey().substring(5));
        Registry.registerBlock(seamless_dark_oak_log, seamless_dark_oak_log.getTranslationKey().substring(5));
        Registry.registerBlock(seamless_smooth_sandstone, seamless_smooth_sandstone.getTranslationKey().substring(5));
        Registry.registerBlock(seamless_smooth_red_sandstone, seamless_smooth_red_sandstone.getTranslationKey().substring(5));
        Registry.registerBlock(invisible_pressure_plate, invisible_pressure_plate.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_barrier, glowing_barrier.getTranslationKey().substring(5));
        Registry.registerBlock(glowing_air, glowing_air.getTranslationKey().substring(5));
        Registry.registerBlock(block_of_death, block_of_death.getTranslationKey().substring(5));
        //Registry.registerBlock(crusher, crusher.getTranslationKey().substring(5));
        Registry.registerBlock(yellow_tulip, yellow_tulip.getTranslationKey().substring(5));
        Registry.registerBlock(blue_tulip, blue_tulip.getTranslationKey().substring(5));
        Registry.registerBlock(black_tulip, black_tulip.getTranslationKey().substring(5));
        Registry.registerBlock(green_tulip, green_tulip.getTranslationKey().substring(5));
        Registry.registerBlock(purple_tulip, purple_tulip.getTranslationKey().substring(5));
        Registry.registerBlock(null_block, null_block.getTranslationKey().substring(5));
        Registry.registerBlock(scaffolding_block, scaffolding_block.getTranslationKey().substring(5));
        Registry.registerBlock(colour_changing_wool, colour_changing_wool.getTranslationKey().substring(5));
        Registry.registerBlock(colour_changing_clay, colour_changing_clay.getTranslationKey().substring(5));
        Registry.registerBlock(colour_changing_glass, colour_changing_glass.getTranslationKey().substring(5));
        Registry.registerBlock(basalt, basalt.getTranslationKey().substring(5));
        Registry.registerBlock(basalt_bricks, basalt_bricks.getTranslationKey().substring(5));
        Registry.registerBlock(polished_basalt, polished_basalt.getTranslationKey().substring(5));
        Registry.registerBlock(polished_stone, polished_stone.getTranslationKey().substring(5));
        Registry.registerBlock(granite_bricks, granite_bricks.getTranslationKey().substring(5));
        Registry.registerBlock(andesite_bricks, andesite_bricks.getTranslationKey().substring(5));
        Registry.registerBlock(diorite_bricks, diorite_bricks.getTranslationKey().substring(5));
        Registry.registerBlock(sandy_bricks, sandy_bricks.getTranslationKey().substring(5));
        Registry.registerBlock(sandy_stone_bricks, sandy_stone_bricks.getTranslationKey().substring(5));
        Registry.registerBlock(dark_nether_bricks, dark_nether_bricks.getTranslationKey().substring(5));
        Registry.registerItem(wooden_pattern, wooden_pattern.getTranslationKey().substring(5));
        Registry.registerItem(wooden_pattern_bars, wooden_pattern_bars.getTranslationKey().substring(5));
        Registry.registerItem(wooden_pattern_button, wooden_pattern_button.getTranslationKey().substring(5));
        Registry.registerItem(wooden_pattern_pressure_plate, wooden_pattern_pressure_plate.getTranslationKey().substring(5));
        Registry.registerItem(wooden_pattern_trapdoor, wooden_pattern_trapdoor.getTranslationKey().substring(5));
        Registry.registerItem(wooden_pattern_wall, wooden_pattern_wall.getTranslationKey().substring(5));
        Registry.registerItem(wooden_pattern_fence, wooden_pattern_fence.getTranslationKey().substring(5));
        Registry.registerItem(wooden_pattern_fence_gate, wooden_pattern_fence_gate.getTranslationKey().substring(5));
        Registry.registerItem(wooden_pattern_stairs, wooden_pattern_stairs.getTranslationKey().substring(5));

    }

    public static void registerRenders() {

        Registry.registerRenderBlock(amethyst_ore);
        Registry.registerRenderBlock(jade_ore);
        Registry.registerRenderBlock(copper_ore);
        Registry.registerRenderBlock(tin_ore);
        Registry.registerRenderBlock(amethyst_block);
        Registry.registerRenderBlock(jade_block);
        Registry.registerRenderBlock(copper_block);
        Registry.registerRenderBlock(tin_block);
        Registry.registerRenderBlock(bronze_block);
        Registry.registerRenderItem(amethyst);
        Registry.registerRenderItem(jade);
        Registry.registerRenderItem(copper_ingot);
        Registry.registerRenderItem(tin_ingot);
        Registry.registerRenderItem(bronze_ingot);
        Registry.registerRenderBlock(diamond_pressure_plate);
        Registry.registerRenderBlock(copper_pressure_plate);
        Registry.registerRenderBlock(tin_pressure_plate);
        Registry.registerRenderBlock(bronze_pressure_plate);
        Registry.registerRenderBlock(amethyst_pressure_plate);
        Registry.registerRenderBlock(jade_pressure_plate);
        Registry.registerRenderBlock(emerald_pressure_plate);
        Registry.registerRenderBlock(quartz_pressure_plate);
        Registry.registerRenderBlock(stone_bars);
        Registry.registerRenderBlock(gold_bars);
        Registry.registerRenderBlock(diamond_bars);
        Registry.registerRenderBlock(copper_bars);
        Registry.registerRenderBlock(tin_bars);
        Registry.registerRenderBlock(bronze_bars);
        Registry.registerRenderBlock(amethyst_bars);
        Registry.registerRenderBlock(jade_bars);
        Registry.registerRenderBlock(emerald_bars);
        Registry.registerRenderBlock(quartz_bars);
        Registry.registerRenderBlock(stone_trapdoor);
        Registry.registerRenderBlock(gold_trapdoor);
        Registry.registerRenderBlock(diamond_trapdoor);
        Registry.registerRenderBlock(copper_trapdoor);
        Registry.registerRenderBlock(tin_trapdoor);
        Registry.registerRenderBlock(bronze_trapdoor);
        Registry.registerRenderBlock(amethyst_trapdoor);
        Registry.registerRenderBlock(jade_trapdoor);
        Registry.registerRenderBlock(emerald_trapdoor);
        Registry.registerRenderBlock(quartz_trapdoor);
        Registry.registerRenderBlock(iron_button);
        Registry.registerRenderBlock(gold_button);
        Registry.registerRenderBlock(diamond_button);
        Registry.registerRenderBlock(copper_button);
        Registry.registerRenderBlock(tin_button);
        Registry.registerRenderBlock(bronze_button);
        Registry.registerRenderBlock(amethyst_button);
        Registry.registerRenderBlock(jade_button);
        Registry.registerRenderBlock(emerald_button);
        Registry.registerRenderBlock(quartz_button);
        Registry.registerRenderBlock(colour_block_white);
        Registry.registerRenderBlock(colour_block_light_gray);
        Registry.registerRenderBlock(colour_block_gray);
        Registry.registerRenderBlock(colour_block_black);
        Registry.registerRenderBlock(colour_block_light_blue);
        Registry.registerRenderBlock(colour_block_cyan);
        Registry.registerRenderBlock(colour_block_blue);
        Registry.registerRenderBlock(colour_block_light_green);
        Registry.registerRenderBlock(colour_block_green);
        Registry.registerRenderBlock(colour_block_yellow);
        Registry.registerRenderBlock(colour_block_orange);
        Registry.registerRenderBlock(colour_block_brown);
        Registry.registerRenderBlock(colour_block_magenta);
        Registry.registerRenderBlock(colour_block_purple);
        Registry.registerRenderBlock(colour_block_red);
        Registry.registerRenderBlock(colour_block_pink);
        Registry.registerRenderBlock(colour_changing_block);
        Registry.registerRenderBlock(glowing_colour_block_white);
        Registry.registerRenderBlock(glowing_colour_block_light_gray);
        Registry.registerRenderBlock(glowing_colour_block_gray);
        Registry.registerRenderBlock(glowing_colour_block_black);
        Registry.registerRenderBlock(glowing_colour_block_light_blue);
        Registry.registerRenderBlock(glowing_colour_block_cyan);
        Registry.registerRenderBlock(glowing_colour_block_blue);
        Registry.registerRenderBlock(glowing_colour_block_light_green);
        Registry.registerRenderBlock(glowing_colour_block_green);
        Registry.registerRenderBlock(glowing_colour_block_yellow);
        Registry.registerRenderBlock(glowing_colour_block_orange);
        Registry.registerRenderBlock(glowing_colour_block_brown);
        Registry.registerRenderBlock(glowing_colour_block_magenta);
        Registry.registerRenderBlock(glowing_colour_block_purple);
        Registry.registerRenderBlock(glowing_colour_block_red);
        Registry.registerRenderBlock(glowing_colour_block_pink);
        Registry.registerRenderBlock(glowing_colour_changing_block);
        Registry.registerRenderBlock(coloured_stone_bricks_white);
        Registry.registerRenderBlock(coloured_stone_bricks_light_gray);
        Registry.registerRenderBlock(coloured_stone_bricks_gray);
        Registry.registerRenderBlock(coloured_stone_bricks_black);
        Registry.registerRenderBlock(coloured_stone_bricks_light_blue);
        Registry.registerRenderBlock(coloured_stone_bricks_cyan);
        Registry.registerRenderBlock(coloured_stone_bricks_blue);
        Registry.registerRenderBlock(coloured_stone_bricks_light_green);
        Registry.registerRenderBlock(coloured_stone_bricks_green);
        Registry.registerRenderBlock(coloured_stone_bricks_yellow);
        Registry.registerRenderBlock(coloured_stone_bricks_orange);
        Registry.registerRenderBlock(coloured_stone_bricks_brown);
        Registry.registerRenderBlock(coloured_stone_bricks_magenta);
        Registry.registerRenderBlock(coloured_stone_bricks_purple);
        Registry.registerRenderBlock(coloured_stone_bricks_red);
        Registry.registerRenderBlock(coloured_stone_bricks_pink);
        Registry.registerRenderBlock(colour_changing_stone_bricks);
        Registry.registerRenderBlock(glowing_coloured_stone_bricks_white);
        Registry.registerRenderBlock(glowing_coloured_stone_bricks_light_gray);
        Registry.registerRenderBlock(glowing_coloured_stone_bricks_gray);
        Registry.registerRenderBlock(glowing_coloured_stone_bricks_black);
        Registry.registerRenderBlock(glowing_coloured_stone_bricks_light_blue);
        Registry.registerRenderBlock(glowing_coloured_stone_bricks_cyan);
        Registry.registerRenderBlock(glowing_coloured_stone_bricks_blue);
        Registry.registerRenderBlock(glowing_coloured_stone_bricks_light_green);
        Registry.registerRenderBlock(glowing_coloured_stone_bricks_green);
        Registry.registerRenderBlock(glowing_coloured_stone_bricks_yellow);
        Registry.registerRenderBlock(glowing_coloured_stone_bricks_orange);
        Registry.registerRenderBlock(glowing_coloured_stone_bricks_brown);
        Registry.registerRenderBlock(glowing_coloured_stone_bricks_magenta);
        Registry.registerRenderBlock(glowing_coloured_stone_bricks_purple);
        Registry.registerRenderBlock(glowing_coloured_stone_bricks_red);
        Registry.registerRenderBlock(glowing_coloured_stone_bricks_pink);
        Registry.registerRenderBlock(glowing_colour_changing_stone_bricks);
        Registry.registerRenderBlock(coloured_stone_white);
        Registry.registerRenderBlock(coloured_stone_light_gray);
        Registry.registerRenderBlock(coloured_stone_gray);
        Registry.registerRenderBlock(coloured_stone_black);
        Registry.registerRenderBlock(coloured_stone_light_blue);
        Registry.registerRenderBlock(coloured_stone_cyan);
        Registry.registerRenderBlock(coloured_stone_blue);
        Registry.registerRenderBlock(coloured_stone_light_green);
        Registry.registerRenderBlock(coloured_stone_green);
        Registry.registerRenderBlock(coloured_stone_yellow);
        Registry.registerRenderBlock(coloured_stone_orange);
        Registry.registerRenderBlock(coloured_stone_brown);
        Registry.registerRenderBlock(coloured_stone_magenta);
        Registry.registerRenderBlock(coloured_stone_purple);
        Registry.registerRenderBlock(coloured_stone_red);
        Registry.registerRenderBlock(coloured_stone_pink);
        Registry.registerRenderBlock(colour_changing_stone);
        Registry.registerRenderBlock(glowing_coloured_stone_white);
        Registry.registerRenderBlock(glowing_coloured_stone_light_gray);
        Registry.registerRenderBlock(glowing_coloured_stone_gray);
        Registry.registerRenderBlock(glowing_coloured_stone_black);
        Registry.registerRenderBlock(glowing_coloured_stone_light_blue);
        Registry.registerRenderBlock(glowing_coloured_stone_cyan);
        Registry.registerRenderBlock(glowing_coloured_stone_blue);
        Registry.registerRenderBlock(glowing_coloured_stone_light_green);
        Registry.registerRenderBlock(glowing_coloured_stone_green);
        Registry.registerRenderBlock(glowing_coloured_stone_yellow);
        Registry.registerRenderBlock(glowing_coloured_stone_orange);
        Registry.registerRenderBlock(glowing_coloured_stone_brown);
        Registry.registerRenderBlock(glowing_coloured_stone_magenta);
        Registry.registerRenderBlock(glowing_coloured_stone_purple);
        Registry.registerRenderBlock(glowing_coloured_stone_red);
        Registry.registerRenderBlock(glowing_coloured_stone_pink);
        Registry.registerRenderBlock(glowing_colour_changing_stone);
        Registry.registerRenderBlock(coloured_cobblestone_white);
        Registry.registerRenderBlock(coloured_cobblestone_light_gray);
        Registry.registerRenderBlock(coloured_cobblestone_gray);
        Registry.registerRenderBlock(coloured_cobblestone_black);
        Registry.registerRenderBlock(coloured_cobblestone_light_blue);
        Registry.registerRenderBlock(coloured_cobblestone_cyan);
        Registry.registerRenderBlock(coloured_cobblestone_blue);
        Registry.registerRenderBlock(coloured_cobblestone_light_green);
        Registry.registerRenderBlock(coloured_cobblestone_green);
        Registry.registerRenderBlock(coloured_cobblestone_yellow);
        Registry.registerRenderBlock(coloured_cobblestone_orange);
        Registry.registerRenderBlock(coloured_cobblestone_brown);
        Registry.registerRenderBlock(coloured_cobblestone_magenta);
        Registry.registerRenderBlock(coloured_cobblestone_purple);
        Registry.registerRenderBlock(coloured_cobblestone_red);
        Registry.registerRenderBlock(coloured_cobblestone_pink);
        Registry.registerRenderBlock(colour_changing_cobblestone);
        Registry.registerRenderBlock(glowing_coloured_cobblestone_white);
        Registry.registerRenderBlock(glowing_coloured_cobblestone_light_gray);
        Registry.registerRenderBlock(glowing_coloured_cobblestone_gray);
        Registry.registerRenderBlock(glowing_coloured_cobblestone_black);
        Registry.registerRenderBlock(glowing_coloured_cobblestone_light_blue);
        Registry.registerRenderBlock(glowing_coloured_cobblestone_cyan);
        Registry.registerRenderBlock(glowing_coloured_cobblestone_blue);
        Registry.registerRenderBlock(glowing_coloured_cobblestone_light_green);
        Registry.registerRenderBlock(glowing_coloured_cobblestone_green);
        Registry.registerRenderBlock(glowing_coloured_cobblestone_yellow);
        Registry.registerRenderBlock(glowing_coloured_cobblestone_orange);
        Registry.registerRenderBlock(glowing_coloured_cobblestone_brown);
        Registry.registerRenderBlock(glowing_coloured_cobblestone_magenta);
        Registry.registerRenderBlock(glowing_coloured_cobblestone_purple);
        Registry.registerRenderBlock(glowing_coloured_cobblestone_red);
        Registry.registerRenderBlock(glowing_coloured_cobblestone_pink);
        Registry.registerRenderBlock(glowing_colour_changing_cobblestone);
        Registry.registerRenderBlock(seamless_stone_slab);
        Registry.registerRenderBlock(seamless_oak_log);
        Registry.registerRenderBlock(seamless_birch_log);
        Registry.registerRenderBlock(seamless_spruce_log);
        Registry.registerRenderBlock(seamless_jungle_log);
        Registry.registerRenderBlock(seamless_acacia_log);
        Registry.registerRenderBlock(seamless_dark_oak_log);
        Registry.registerRenderBlock(seamless_smooth_sandstone);
        Registry.registerRenderBlock(seamless_smooth_red_sandstone);
        Registry.registerRenderBlock(invisible_pressure_plate);
        Registry.registerRenderBlock(glowing_barrier);
        Registry.registerRenderBlock(glowing_air);
        Registry.registerRenderBlock(block_of_death);
        //Registry.registerRenderBlock(iron_chest);
        //Registry.registerRenderBlock(crusher);
        Registry.registerRenderBlock(yellow_tulip);
        Registry.registerRenderBlock(blue_tulip);
        Registry.registerRenderBlock(black_tulip);
        Registry.registerRenderBlock(green_tulip);
        Registry.registerRenderBlock(purple_tulip);
        Registry.registerRenderBlock(null_block);
        Registry.registerRenderBlock(scaffolding_block);
        Registry.registerRenderBlock(colour_changing_wool);
        Registry.registerRenderBlock(colour_changing_clay);
        Registry.registerRenderBlock(colour_changing_glass);
        Registry.registerRenderBlock(basalt);
        Registry.registerRenderBlock(basalt_bricks);
        Registry.registerRenderBlock(polished_basalt);
        Registry.registerRenderBlock(polished_stone);
        Registry.registerRenderBlock(granite_bricks);
        Registry.registerRenderBlock(andesite_bricks);
        Registry.registerRenderBlock(diorite_bricks);
        Registry.registerRenderBlock(sandy_bricks);
        Registry.registerRenderBlock(sandy_stone_bricks);
        Registry.registerRenderBlock(dark_nether_bricks);
        Registry.registerRenderItem(wooden_pattern);
        Registry.registerRenderItem(wooden_pattern_bars);
        Registry.registerRenderItem(wooden_pattern_button);
        Registry.registerRenderItem(wooden_pattern_pressure_plate);
        Registry.registerRenderItem(wooden_pattern_trapdoor);
        Registry.registerRenderItem(wooden_pattern_wall);
        Registry.registerRenderItem(wooden_pattern_fence);
        Registry.registerRenderItem(wooden_pattern_fence_gate);
        Registry.registerRenderItem(wooden_pattern_stairs);
    }

    public static void removeCrafting() {
        if (Config.crafting) {
            RecipeRemover.removeCraftingRecipeBlockWithMetadata(Blocks.STONE, 2);
            RecipeRemover.removeCraftingRecipeBlockWithMetadata(Blocks.STONE, 4);
            RecipeRemover.removeCraftingRecipeBlockWithMetadata(Blocks.STONE, 6);
        }

    }

    public static void registerGuiHandlers() {

    }

    public static void registerEventHandlers() {
        MinecraftForge.EVENT_BUS.register(new Shield(0, (String)null, creativeTab));
    }

    public static void crafting() {
        if (Config.crafting) {

            GameRegistry.addShapedRecipe(new ItemStack(amethyst_block).getItem().getRegistryName(), null, new ItemStack(amethyst_block), new Object[]{"AAA", "AAA", "AAA", 'A', amethyst});
            GameRegistry.addShapedRecipe(new ItemStack(jade_block).getItem().getRegistryName(), null, new ItemStack(jade_block), new Object[]{"JJJ", "JJJ", "JJJ", 'J', jade});
            GameRegistry.addShapedRecipe(new ItemStack(copper_block).getItem().getRegistryName(), null, new ItemStack(copper_block), new Object[]{"CCC", "CCC", "CCC", 'C', copper_ingot});
            GameRegistry.addShapedRecipe(new ItemStack(tin_block).getItem().getRegistryName(), null, new ItemStack(tin_block), new Object[]{"TTT", "TTT", "TTT", 'T', tin_ingot});
            GameRegistry.addShapedRecipe(new ItemStack(bronze_block).getItem().getRegistryName(), null, new ItemStack(bronze_block), new Object[]{"BBB", "BBB", "BBB", 'B', bronze_ingot});


            GameRegistry.addShapelessRecipe(new ItemStack(amethyst, 9).getItem().getRegistryName(), null, new ItemStack(amethyst, 9), Ingredient.fromStacks(new ItemStack(amethyst_block)));
            GameRegistry.addShapelessRecipe(new ItemStack(jade, 9).getItem().getRegistryName(), null, new ItemStack(jade, 9), ModUtil.objectToIngredient(new Object[]{new ItemStack(jade_block)}));
            GameRegistry.addShapelessRecipe(new ItemStack(copper_ingot, 9).getItem().getRegistryName(), null, new ItemStack(copper_ingot, 9), ModUtil.objectToIngredient(new Object[]{new ItemStack(copper_block)}));
            GameRegistry.addShapelessRecipe(new ItemStack(tin_ingot, 9).getItem().getRegistryName(), null, new ItemStack(tin_ingot, 9), ModUtil.objectToIngredient(new Object[]{new ItemStack(tin_block)}));
            GameRegistry.addShapelessRecipe(new ItemStack(bronze_ingot, 9).getItem().getRegistryName(), null, new ItemStack(bronze_ingot, 9), ModUtil.objectToIngredient(new Object[]{new ItemStack(bronze_block)}));
            GameRegistry.addShapelessRecipe(new ItemStack(bronze_ingot, 1).getItem().getRegistryName(), null, new ItemStack(bronze_ingot, 1), ModUtil.objectToIngredient(new Object[]{tin_ingot, copper_ingot, copper_ingot, copper_ingot}));
            GameRegistry.addSmelting(amethyst_ore, new ItemStack(amethyst), 1.2F);
            GameRegistry.addSmelting(jade_ore, new ItemStack(jade), 1.2F);
            GameRegistry.addSmelting(copper_ore, new ItemStack(copper_ingot), 0.7F);
            GameRegistry.addSmelting(tin_ore, new ItemStack(tin_ingot), 0.7F);
            GameRegistry.addShapelessRecipe(new ItemStack(diamond_pressure_plate).getItem().getRegistryName(), null, new ItemStack(diamond_pressure_plate), ModUtil.objectToIngredient(new Object[]{wooden_pattern_pressure_plate, Items.DIAMOND}));
            GameRegistry.addShapelessRecipe(new ItemStack(copper_pressure_plate).getItem().getRegistryName(), null, new ItemStack(copper_pressure_plate), ModUtil.objectToIngredient(new Object[]{wooden_pattern_pressure_plate, copper_ingot}));
            GameRegistry.addShapelessRecipe(new ItemStack(tin_pressure_plate).getItem().getRegistryName(), null, new ItemStack(tin_pressure_plate), ModUtil.objectToIngredient(new Object[]{wooden_pattern_pressure_plate, tin_ingot}));
            GameRegistry.addShapelessRecipe(new ItemStack(bronze_pressure_plate).getItem().getRegistryName(), null, new ItemStack(bronze_pressure_plate), ModUtil.objectToIngredient(new Object[]{wooden_pattern_pressure_plate, bronze_ingot}));
            GameRegistry.addShapelessRecipe(new ItemStack(amethyst_pressure_plate).getItem().getRegistryName(), null, new ItemStack(amethyst_pressure_plate), ModUtil.objectToIngredient(new Object[]{wooden_pattern_pressure_plate, amethyst}));
            GameRegistry.addShapelessRecipe(new ItemStack(jade_pressure_plate).getItem().getRegistryName(), null, new ItemStack(jade_pressure_plate), ModUtil.objectToIngredient(new Object[]{wooden_pattern_pressure_plate, jade}));
            GameRegistry.addShapelessRecipe(new ItemStack(emerald_pressure_plate).getItem().getRegistryName(), null, new ItemStack(emerald_pressure_plate), ModUtil.objectToIngredient(new Object[]{wooden_pattern_pressure_plate, Items.EMERALD}));
            GameRegistry.addShapelessRecipe(new ItemStack(bronze_pressure_plate).getItem().getRegistryName(), null, new ItemStack(bronze_pressure_plate), ModUtil.objectToIngredient(new Object[]{wooden_pattern_pressure_plate, Items.QUARTZ}));
            GameRegistry.addShapelessRecipe(new ItemStack(stone_bars).getItem().getRegistryName(), null, new ItemStack(stone_bars), ModUtil.objectToIngredient(new Object[]{wooden_pattern_bars, Blocks.STONE}));
            if (Config.craft_vanilla_blocks_with_patterns) {
                GameRegistry.addShapelessRecipe(new ItemStack(Blocks.IRON_BARS).getItem().getRegistryName(), null, new ItemStack(Blocks.IRON_BARS), ModUtil.objectToIngredient(new Object[]{wooden_pattern_bars, Items.IRON_INGOT}));
            }

            GameRegistry.addShapelessRecipe(new ItemStack(gold_bars).getItem().getRegistryName(), null, new ItemStack(gold_bars), ModUtil.objectToIngredient(new Object[]{wooden_pattern_bars, Items.GOLD_INGOT}));
            GameRegistry.addShapelessRecipe(new ItemStack(diamond_bars).getItem().getRegistryName(), null, new ItemStack(diamond_bars), ModUtil.objectToIngredient(new Object[]{wooden_pattern_bars, Items.DIAMOND}));
            GameRegistry.addShapelessRecipe(new ItemStack(copper_bars).getItem().getRegistryName(), null, new ItemStack(copper_bars), ModUtil.objectToIngredient(new Object[]{wooden_pattern_bars, copper_ingot}));
            GameRegistry.addShapelessRecipe(new ItemStack(tin_bars).getItem().getRegistryName(), null, new ItemStack(tin_bars), ModUtil.objectToIngredient(new Object[]{wooden_pattern_bars, tin_ingot}));
            GameRegistry.addShapelessRecipe(new ItemStack(bronze_bars).getItem().getRegistryName(), null, new ItemStack(bronze_bars), ModUtil.objectToIngredient(new Object[]{wooden_pattern_bars, bronze_ingot}));
            GameRegistry.addShapelessRecipe(new ItemStack(amethyst_bars).getItem().getRegistryName(), null, new ItemStack(amethyst_bars), ModUtil.objectToIngredient(new Object[]{wooden_pattern_bars, amethyst}));
            GameRegistry.addShapelessRecipe(new ItemStack(jade_bars).getItem().getRegistryName(), null, new ItemStack(jade_bars), ModUtil.objectToIngredient(new Object[]{wooden_pattern_bars, jade}));
            GameRegistry.addShapelessRecipe(new ItemStack(emerald_bars).getItem().getRegistryName(), null, new ItemStack(emerald_bars), ModUtil.objectToIngredient(new Object[]{wooden_pattern_bars, Items.EMERALD}));
            GameRegistry.addShapelessRecipe(new ItemStack(quartz_bars).getItem().getRegistryName(), null, new ItemStack(quartz_bars), ModUtil.objectToIngredient(new Object[]{wooden_pattern_bars, Items.QUARTZ}));
            if (Config.craft_vanilla_blocks_with_patterns) {
                GameRegistry.addShapelessRecipe(new ItemStack(Blocks.TRAPDOOR).getItem().getRegistryName(), null, new ItemStack(Blocks.TRAPDOOR), ModUtil.objectToIngredient(new Object[]{wooden_pattern_trapdoor, Blocks.PLANKS}));
                GameRegistry.addShapelessRecipe(new ItemStack(Blocks.IRON_TRAPDOOR).getItem().getRegistryName(), null, new ItemStack(Blocks.IRON_TRAPDOOR), ModUtil.objectToIngredient(new Object[]{wooden_pattern_trapdoor, Items.IRON_INGOT}));
            }

            GameRegistry.addShapelessRecipe(new ItemStack(stone_trapdoor).getItem().getRegistryName(), null, new ItemStack(stone_trapdoor), ModUtil.objectToIngredient(new Object[]{wooden_pattern_trapdoor, Blocks.STONE}));
            GameRegistry.addShapelessRecipe(new ItemStack(gold_trapdoor).getItem().getRegistryName(), null, new ItemStack(gold_trapdoor), ModUtil.objectToIngredient(new Object[]{wooden_pattern_trapdoor, Items.GOLD_INGOT}));
            GameRegistry.addShapelessRecipe(new ItemStack(diamond_trapdoor).getItem().getRegistryName(), null, new ItemStack(diamond_trapdoor), ModUtil.objectToIngredient(new Object[]{wooden_pattern_trapdoor, Items.DIAMOND}));
            GameRegistry.addShapelessRecipe(new ItemStack(emerald_trapdoor).getItem().getRegistryName(), null, new ItemStack(emerald_trapdoor), ModUtil.objectToIngredient(new Object[]{wooden_pattern_trapdoor, Items.EMERALD}));
            GameRegistry.addShapelessRecipe(new ItemStack(quartz_trapdoor).getItem().getRegistryName(), null, new ItemStack(quartz_trapdoor), ModUtil.objectToIngredient(new Object[]{wooden_pattern_trapdoor, Items.QUARTZ}));
            GameRegistry.addShapelessRecipe(new ItemStack(copper_trapdoor).getItem().getRegistryName(), null, new ItemStack(copper_trapdoor), ModUtil.objectToIngredient(new Object[]{wooden_pattern_trapdoor, copper_ingot}));
            GameRegistry.addShapelessRecipe(new ItemStack(tin_trapdoor).getItem().getRegistryName(), null, new ItemStack(tin_trapdoor), ModUtil.objectToIngredient(new Object[]{wooden_pattern_trapdoor, tin_ingot}));
            GameRegistry.addShapelessRecipe(new ItemStack(bronze_trapdoor).getItem().getRegistryName(), null, new ItemStack(bronze_trapdoor), ModUtil.objectToIngredient(new Object[]{wooden_pattern_trapdoor, bronze_ingot}));
            GameRegistry.addShapelessRecipe(new ItemStack(amethyst_trapdoor).getItem().getRegistryName(), null, new ItemStack(amethyst_trapdoor), ModUtil.objectToIngredient(new Object[]{wooden_pattern_trapdoor, amethyst}));
            GameRegistry.addShapelessRecipe(new ItemStack(jade_trapdoor).getItem().getRegistryName(), null, new ItemStack(jade_trapdoor), ModUtil.objectToIngredient(new Object[]{wooden_pattern_trapdoor, jade}));
            if (Config.craft_vanilla_blocks_with_patterns) {
                GameRegistry.addShapelessRecipe(new ItemStack(Blocks.WOODEN_BUTTON).getItem().getRegistryName(), null, new ItemStack(Blocks.WOODEN_BUTTON), ModUtil.objectToIngredient(new Object[]{wooden_pattern_button, Blocks.PLANKS}));
                GameRegistry.addShapelessRecipe(new ItemStack(Blocks.STONE_BUTTON).getItem().getRegistryName(), null, new ItemStack(Blocks.STONE_BUTTON), ModUtil.objectToIngredient(new Object[]{wooden_pattern_button, Blocks.STONE}));
            }

            GameRegistry.addShapelessRecipe(new ItemStack(iron_button).getItem().getRegistryName(), null, new ItemStack(iron_button), ModUtil.objectToIngredient(new Object[]{wooden_pattern_button, Items.IRON_INGOT}));
            GameRegistry.addShapelessRecipe(new ItemStack(gold_button).getItem().getRegistryName(), null, new ItemStack(gold_button), ModUtil.objectToIngredient(new Object[]{wooden_pattern_button, Items.GOLD_INGOT}));
            GameRegistry.addShapelessRecipe(new ItemStack(diamond_button).getItem().getRegistryName(), null, new ItemStack(diamond_button), ModUtil.objectToIngredient(new Object[]{wooden_pattern_button, Items.DIAMOND}));
            GameRegistry.addShapelessRecipe(new ItemStack(copper_button).getItem().getRegistryName(), null, new ItemStack(copper_button), ModUtil.objectToIngredient(new Object[]{wooden_pattern_button, copper_ingot}));
            GameRegistry.addShapelessRecipe(new ItemStack(tin_button).getItem().getRegistryName(), null, new ItemStack(tin_button), ModUtil.objectToIngredient(new Object[]{wooden_pattern_button, tin_ingot}));
            GameRegistry.addShapelessRecipe(new ItemStack(bronze_button).getItem().getRegistryName(), null, new ItemStack(bronze_button), ModUtil.objectToIngredient(new Object[]{wooden_pattern_button, bronze_ingot}));
            GameRegistry.addShapelessRecipe(new ItemStack(amethyst_button).getItem().getRegistryName(), null, new ItemStack(amethyst_button), ModUtil.objectToIngredient(new Object[]{wooden_pattern_button, amethyst}));
            GameRegistry.addShapelessRecipe(new ItemStack(jade_button).getItem().getRegistryName(), null, new ItemStack(jade_button), ModUtil.objectToIngredient(new Object[]{wooden_pattern_button, jade}));
            GameRegistry.addShapelessRecipe(new ItemStack(emerald_button).getItem().getRegistryName(), null, new ItemStack(emerald_button), ModUtil.objectToIngredient(new Object[]{wooden_pattern_button, Items.EMERALD}));
            GameRegistry.addShapelessRecipe(new ItemStack(quartz_button).getItem().getRegistryName(), null, new ItemStack(quartz_button), ModUtil.objectToIngredient(new Object[]{wooden_pattern_button, Items.QUARTZ}));
            if (Config.craft_vanilla_blocks_with_patterns) {
                GameRegistry.addShapelessRecipe(new ItemStack(Blocks.OAK_FENCE).getItem().getRegistryName(), null, new ItemStack(Blocks.OAK_FENCE), ModUtil.objectToIngredient(new Object[]{wooden_pattern_fence, new ItemStack(Blocks.PLANKS, 1, 0)}));
                GameRegistry.addShapelessRecipe(new ItemStack(Blocks.SPRUCE_FENCE).getItem().getRegistryName(), null, new ItemStack(Blocks.SPRUCE_FENCE), ModUtil.objectToIngredient(new Object[]{wooden_pattern_fence, new ItemStack(Blocks.PLANKS, 1, 1)}));
                GameRegistry.addShapelessRecipe(new ItemStack(Blocks.BIRCH_FENCE).getItem().getRegistryName(), null, new ItemStack(Blocks.BIRCH_FENCE), ModUtil.objectToIngredient(new Object[]{wooden_pattern_fence, new ItemStack(Blocks.PLANKS, 1, 2)}));
                GameRegistry.addShapelessRecipe(new ItemStack(Blocks.JUNGLE_FENCE).getItem().getRegistryName(), null, new ItemStack(Blocks.JUNGLE_FENCE), ModUtil.objectToIngredient(new Object[]{wooden_pattern_fence, new ItemStack(Blocks.PLANKS, 1, 3)}));
                GameRegistry.addShapelessRecipe(new ItemStack(Blocks.ACACIA_FENCE).getItem().getRegistryName(), null, new ItemStack(Blocks.ACACIA_FENCE), ModUtil.objectToIngredient(new Object[]{wooden_pattern_fence, new ItemStack(Blocks.PLANKS, 1, 4)}));
                GameRegistry.addShapelessRecipe(new ItemStack(Blocks.DARK_OAK_FENCE).getItem().getRegistryName(), null, new ItemStack(Blocks.DARK_OAK_FENCE), ModUtil.objectToIngredient(new Object[]{wooden_pattern_fence, new ItemStack(Blocks.PLANKS, 1, 5)}));
                GameRegistry.addShapelessRecipe(new ItemStack(Blocks.NETHER_BRICK_FENCE).getItem().getRegistryName(), null, new ItemStack(Blocks.NETHER_BRICK_FENCE), ModUtil.objectToIngredient(new Object[]{wooden_pattern_fence, Blocks.NETHER_BRICK}));
            }

            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_white, 4).getItem().getRegistryName(), null, new ItemStack(colour_block_white, 4), ModUtil.objectToIngredient(new Object[]{new ItemStack(tin_ingot), new ItemStack(tin_ingot), new ItemStack(Items.IRON_INGOT), new ItemStack(Items.IRON_INGOT)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_black, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_black, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_white), new ItemStack(Items.DYE, 1, 0)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_light_gray, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_light_gray, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_white), new ItemStack(Items.DYE, 1, 7)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_gray, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_gray, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_white), new ItemStack(Items.DYE, 1, 8)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_light_blue, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_light_blue, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_white), new ItemStack(Items.DYE, 1, 12)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_cyan, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_cyan, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_white), new ItemStack(Items.DYE, 1, 6)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_blue, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_blue, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_white), new ItemStack(Items.DYE, 1, 4)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_light_green, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_light_green, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_white), new ItemStack(Items.DYE, 1, 10)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_green, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_green, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_white), new ItemStack(Items.DYE, 1, 2)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_red, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_red, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_white), new ItemStack(Items.DYE, 1, 1)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_orange, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_orange, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_white), new ItemStack(Items.DYE, 1, 14)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_brown, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_brown, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_white), new ItemStack(Items.DYE, 1, 3)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_magenta, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_magenta, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_white), new ItemStack(Items.DYE, 1, 13)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_purple, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_purple, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_white), new ItemStack(Items.DYE, 1, 5)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_yellow, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_yellow, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_white), new ItemStack(Items.DYE, 1, 11)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_pink, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_pink, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_white), new ItemStack(Items.DYE, 1, 9)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_black)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_light_gray)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_gray)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_light_blue)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_cyan)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_blue)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_light_green)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_green)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_red)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_orange)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_brown)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_magenta)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_purple)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_yellow)}));
            GameRegistry.addShapelessRecipe(new ItemStack(colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_pink)}));
            GameRegistry.addShapedRecipe(new ItemStack(colour_changing_block).getItem().getRegistryName(), null, new ItemStack(colour_changing_block), new Object[]{" D ", "DCD", " D ", 'D', Items.DYE, 'C', colour_block_white});
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_block_white), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_black, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_black, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_white), new ItemStack(Items.DYE, 1, 0)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_light_gray, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_light_gray, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_white), new ItemStack(Items.DYE, 1, 7)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_gray, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_gray, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_white), new ItemStack(Items.DYE, 1, 8)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_light_blue, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_light_blue, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_white), new ItemStack(Items.DYE, 1, 12)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_cyan, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_cyan, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_white), new ItemStack(Items.DYE, 1, 6)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_blue, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_blue, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_white), new ItemStack(Items.DYE, 1, 4)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_light_green, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_light_green, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_white), new ItemStack(Items.DYE, 1, 10)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_green, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_green, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_white), new ItemStack(Items.DYE, 1, 2)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_red, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_red, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_white), new ItemStack(Items.DYE, 1, 1)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_orange, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_orange, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_white), new ItemStack(Items.DYE, 1, 14)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_brown, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_brown, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_white), new ItemStack(Items.DYE, 1, 3)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_magenta, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_magenta, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_white), new ItemStack(Items.DYE, 1, 13)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_purple, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_purple, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_white), new ItemStack(Items.DYE, 1, 5)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_yellow, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_yellow, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_white), new ItemStack(Items.DYE, 1, 11)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_pink, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_pink, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_white), new ItemStack(Items.DYE, 1, 9)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_black)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_light_gray)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_gray)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_light_blue)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_cyan)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_blue)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_light_green)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_green)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_red)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_orange)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_brown)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_magenta)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_purple)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_yellow)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_colour_block_white, 1).getItem().getRegistryName(), null, new ItemStack(glowing_colour_block_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(glowing_colour_block_pink)}));
            GameRegistry.addShapedRecipe(new ItemStack(glowing_colour_changing_block).getItem().getRegistryName(), null, new ItemStack(glowing_colour_changing_block), new Object[]{" D ", "DCD", " D ", 'D', Items.DYE, 'C', glowing_colour_block_white});
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_bricks_white, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_bricks_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 15)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_bricks_black, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_bricks_black, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 0)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_bricks_light_gray, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_bricks_light_gray, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 7)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_bricks_gray, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_bricks_gray, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 8)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_bricks_light_blue, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_bricks_light_blue, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 12)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_bricks_cyan, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_bricks_cyan, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 6)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_bricks_blue, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_bricks_blue, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 4)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_bricks_light_green, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_bricks_light_green, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 10)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_bricks_green, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_bricks_green, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 2)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_bricks_red, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_bricks_red, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 1)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_bricks_orange, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_bricks_orange, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 14)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_bricks_brown, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_bricks_brown, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 3)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_bricks_magenta, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_bricks_magenta, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 13)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_bricks_purple, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_bricks_purple, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 5)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_bricks_yellow, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_bricks_yellow, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 11)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_bricks_pink, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_bricks_pink, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 9)}));
            GameRegistry.addShapedRecipe(new ItemStack(colour_changing_stone_bricks).getItem().getRegistryName(), null, new ItemStack(colour_changing_stone_bricks), new Object[]{" D ", "DSD", " D ", 'D', Items.DYE, 'S', Blocks.STONEBRICK});
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_bricks_white, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_bricks_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 15), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_bricks_black, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_bricks_black, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 0), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_bricks_light_gray, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_bricks_light_gray, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 7), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_bricks_gray, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_bricks_gray, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 8), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_bricks_light_blue, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_bricks_light_blue, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 12), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_bricks_cyan, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_bricks_cyan, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 6), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_bricks_blue, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_bricks_blue, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 4), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_bricks_light_green, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_bricks_light_green, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 10), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_bricks_green, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_bricks_green, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 2), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_bricks_red, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_bricks_red, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 1), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_bricks_orange, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_bricks_orange, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 14), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_bricks_brown, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_bricks_brown, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 3), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_bricks_magenta, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_bricks_magenta, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 13), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_bricks_purple, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_bricks_purple, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 5), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_bricks_yellow, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_bricks_yellow, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 11), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_bricks_pink, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_bricks_pink, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONEBRICK), new ItemStack(Items.DYE, 1, 9), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapedRecipe(new ItemStack(glowing_colour_changing_stone_bricks).getItem().getRegistryName(), null, new ItemStack(glowing_colour_changing_stone_bricks), new Object[]{"GDG", "DSD", "GDG", 'D', Items.DYE, 'S', Blocks.STONEBRICK, 'G', Blocks.GLOWSTONE});
            GameRegistry.addShapedRecipe(new ItemStack(glowing_colour_changing_stone_bricks).getItem().getRegistryName(), null, new ItemStack(glowing_colour_changing_stone_bricks), new Object[]{"DGD", "GSG", "DGD", 'D', Items.DYE, 'S', Blocks.STONEBRICK, 'G', Blocks.GLOWSTONE});
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_white, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 15)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_black, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_black, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 0)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_light_gray, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_light_gray, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 7)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_gray, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_gray, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 8)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_light_blue, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_light_blue, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 12)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_cyan, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_cyan, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 6)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_blue, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_blue, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 4)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_light_green, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_light_green, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 10)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_green, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_green, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 2)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_red, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_red, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 1)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_orange, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_orange, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 14)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_brown, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_brown, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 3)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_magenta, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_magenta, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 13)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_purple, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_purple, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 5)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_yellow, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_yellow, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 11)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_stone_pink, 1).getItem().getRegistryName(), null, new ItemStack(coloured_stone_pink, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 9)}));
            GameRegistry.addShapedRecipe(new ItemStack(colour_changing_stone).getItem().getRegistryName(), null, new ItemStack(colour_changing_stone), new Object[]{" D ", "DSD", " D ", 'D', Items.DYE, 'S', Blocks.STONE});
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_white, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 15), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_black, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_black, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 0), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_light_gray, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_light_gray, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 7), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_gray, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_gray, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 8), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_light_blue, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_light_blue, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 12), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_cyan, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_cyan, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 6), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_blue, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_blue, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 4), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_light_green, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_light_green, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 10), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_green, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_green, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 2), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_red, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_red, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 1), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_orange, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_orange, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 14), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_brown, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_brown, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 3), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_magenta, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_magenta, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 13), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_purple, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_purple, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 5), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_yellow, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_yellow, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 11), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_stone_pink, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_stone_pink, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.STONE), new ItemStack(Items.DYE, 1, 9), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapedRecipe(new ItemStack(glowing_colour_changing_stone).getItem().getRegistryName(), null, new ItemStack(glowing_colour_changing_stone), new Object[]{"GDG", "DSD", "GDG", 'D', Items.DYE, 'S', Blocks.STONE, 'G', Blocks.GLOWSTONE});
            GameRegistry.addShapedRecipe(new ItemStack(glowing_colour_changing_stone).getItem().getRegistryName(), null, new ItemStack(glowing_colour_changing_stone), new Object[]{"DGD", "GSG", "DGD", 'D', Items.DYE, 'S', Blocks.STONE, 'G', Blocks.GLOWSTONE});
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_cobblestone_white, 1).getItem().getRegistryName(), null, new ItemStack(coloured_cobblestone_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 15)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_cobblestone_black, 1).getItem().getRegistryName(), null, new ItemStack(coloured_cobblestone_black, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 0)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_cobblestone_light_gray, 1).getItem().getRegistryName(), null, new ItemStack(coloured_cobblestone_light_gray, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 7)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_cobblestone_gray, 1).getItem().getRegistryName(), null, new ItemStack(coloured_cobblestone_gray, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 8)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_cobblestone_light_blue, 1).getItem().getRegistryName(), null, new ItemStack(coloured_cobblestone_light_blue, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 12)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_cobblestone_cyan, 1).getItem().getRegistryName(), null, new ItemStack(coloured_cobblestone_cyan, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 6)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_cobblestone_blue, 1).getItem().getRegistryName(), null, new ItemStack(coloured_cobblestone_blue, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 4)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_cobblestone_light_green, 1).getItem().getRegistryName(), null, new ItemStack(coloured_cobblestone_light_green, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 10)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_cobblestone_green, 1).getItem().getRegistryName(), null, new ItemStack(coloured_cobblestone_green, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 2)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_cobblestone_red, 1).getItem().getRegistryName(), null, new ItemStack(coloured_cobblestone_red, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 1)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_cobblestone_orange, 1).getItem().getRegistryName(), null, new ItemStack(coloured_cobblestone_orange, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 14)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_cobblestone_brown, 1).getItem().getRegistryName(), null, new ItemStack(coloured_cobblestone_brown, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 3)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_cobblestone_magenta, 1).getItem().getRegistryName(), null, new ItemStack(coloured_cobblestone_magenta, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 13)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_cobblestone_purple, 1).getItem().getRegistryName(), null, new ItemStack(coloured_cobblestone_purple, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 5)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_cobblestone_yellow, 1).getItem().getRegistryName(), null, new ItemStack(coloured_cobblestone_yellow, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 11)}));
            GameRegistry.addShapelessRecipe(new ItemStack(coloured_cobblestone_pink, 1).getItem().getRegistryName(), null, new ItemStack(coloured_cobblestone_pink, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 9)}));
            GameRegistry.addShapedRecipe(new ItemStack(colour_changing_cobblestone).getItem().getRegistryName(), null, new ItemStack(colour_changing_cobblestone), new Object[]{" D ", "DCD", " D ", 'D', Items.DYE, 'C', Blocks.COBBLESTONE});
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_cobblestone_white, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_cobblestone_white, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 15), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_cobblestone_black, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_cobblestone_black, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 0), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_cobblestone_light_gray, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_cobblestone_light_gray, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 7), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_cobblestone_gray, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_cobblestone_gray, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 8), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_cobblestone_light_blue, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_cobblestone_light_blue, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 12), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_cobblestone_cyan, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_cobblestone_cyan, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 6), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_cobblestone_blue, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_cobblestone_blue, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 4), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_cobblestone_light_green, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_cobblestone_light_green, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 10), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_cobblestone_green, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_cobblestone_green, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 2), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_cobblestone_red, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_cobblestone_red, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 1), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_cobblestone_orange, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_cobblestone_orange, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 14), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_cobblestone_brown, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_cobblestone_brown, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 3), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_cobblestone_magenta, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_cobblestone_magenta, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 13), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_cobblestone_purple, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_cobblestone_purple, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 5), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_cobblestone_yellow, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_cobblestone_yellow, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 11), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapelessRecipe(new ItemStack(glowing_coloured_cobblestone_pink, 1).getItem().getRegistryName(), null, new ItemStack(glowing_coloured_cobblestone_pink, 1), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.COBBLESTONE), new ItemStack(Items.DYE, 1, 9), new ItemStack(Blocks.GLOWSTONE)}));
            GameRegistry.addShapedRecipe(new ItemStack(glowing_colour_changing_cobblestone).getItem().getRegistryName(), null, new ItemStack(glowing_colour_changing_cobblestone), new Object[]{"GDG", "DCD", "GDG", 'D', Items.DYE, 'C', Blocks.COBBLESTONE, 'G', Blocks.GLOWSTONE});
            GameRegistry.addShapedRecipe(new ItemStack(glowing_colour_changing_cobblestone).getItem().getRegistryName(), null, new ItemStack(glowing_colour_changing_cobblestone), new Object[]{"DGD", "GCG", "DGD", 'D', Items.DYE, 'C', Blocks.COBBLESTONE, 'G', Blocks.GLOWSTONE});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_stone_slab, 4).getItem().getRegistryName(), null, new ItemStack(seamless_stone_slab, 4), new Object[]{"SS ", "SS ", "   ", 'S', new ItemStack(Blocks.STONE_SLAB, 1, 2)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_stone_slab, 4).getItem().getRegistryName(), null, new ItemStack(seamless_stone_slab, 4), new Object[]{" SS", " SS", "   ", 'S', new ItemStack(Blocks.STONE_SLAB, 1, 2)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_stone_slab, 4).getItem().getRegistryName(), null, new ItemStack(seamless_stone_slab, 4), new Object[]{"   ", "SS ", "SS ", 'S', new ItemStack(Blocks.STONE_SLAB, 1, 2)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_stone_slab, 4).getItem().getRegistryName(), null, new ItemStack(seamless_stone_slab, 4), new Object[]{"   ", " SS", " SS", 'S', new ItemStack(Blocks.STONE_SLAB, 1, 2)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_oak_log, 4).getItem().getRegistryName(), null, new ItemStack(seamless_oak_log, 4), new Object[]{"LL ", "LL ", "   ", 'L', new ItemStack(Blocks.LOG, 1, 0)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_oak_log, 4).getItem().getRegistryName(), null, new ItemStack(seamless_oak_log, 4), new Object[]{" LL", " LL", "   ", 'L', new ItemStack(Blocks.LOG, 1, 0)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_oak_log, 4).getItem().getRegistryName(), null, new ItemStack(seamless_oak_log, 4), new Object[]{"   ", "LL ", "LL ", 'L', new ItemStack(Blocks.LOG, 1, 0)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_oak_log, 4).getItem().getRegistryName(), null, new ItemStack(seamless_oak_log, 4), new Object[]{"   ", " LL", " LL", 'L', new ItemStack(Blocks.LOG, 1, 0)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_birch_log, 4).getItem().getRegistryName(), null, new ItemStack(seamless_birch_log, 4), new Object[]{"LL ", "LL ", "   ", 'L', new ItemStack(Blocks.LOG, 1, 2)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_birch_log, 4).getItem().getRegistryName(), null, new ItemStack(seamless_birch_log, 4), new Object[]{" LL", " LL", "   ", 'L', new ItemStack(Blocks.LOG, 1, 2)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_birch_log, 4).getItem().getRegistryName(), null, new ItemStack(seamless_birch_log, 4), new Object[]{"   ", "LL ", "LL ", 'L', new ItemStack(Blocks.LOG, 1, 2)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_birch_log, 4).getItem().getRegistryName(), null, new ItemStack(seamless_birch_log, 4), new Object[]{"   ", " LL", " LL", 'L', new ItemStack(Blocks.LOG, 1, 2)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_spruce_log, 4).getItem().getRegistryName(), null, new ItemStack(seamless_spruce_log, 4), new Object[]{"LL ", "LL ", "   ", 'L', new ItemStack(Blocks.LOG, 1, 1)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_spruce_log, 4).getItem().getRegistryName(), null, new ItemStack(seamless_spruce_log, 4), new Object[]{" LL", " LL", "   ", 'L', new ItemStack(Blocks.LOG, 1, 1)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_spruce_log, 4).getItem().getRegistryName(), null, new ItemStack(seamless_spruce_log, 4), new Object[]{"   ", "LL ", "LL ", 'L', new ItemStack(Blocks.LOG, 1, 1)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_spruce_log, 4).getItem().getRegistryName(), null, new ItemStack(seamless_spruce_log, 4), new Object[]{"   ", " LL", " LL", 'L', new ItemStack(Blocks.LOG, 1, 1)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_jungle_log, 4).getItem().getRegistryName(), null, new ItemStack(seamless_jungle_log, 4), new Object[]{"LL ", "LL ", "   ", 'L', new ItemStack(Blocks.LOG, 1, 3)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_jungle_log, 4).getItem().getRegistryName(), null, new ItemStack(seamless_jungle_log, 4), new Object[]{" LL", " LL", "   ", 'L', new ItemStack(Blocks.LOG, 1, 3)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_jungle_log, 4).getItem().getRegistryName(), null, new ItemStack(seamless_jungle_log, 4), new Object[]{"   ", "LL ", "LL ", 'L', new ItemStack(Blocks.LOG, 1, 3)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_jungle_log, 4).getItem().getRegistryName(), null, new ItemStack(seamless_jungle_log, 4), new Object[]{"   ", " LL", " LL", 'L', new ItemStack(Blocks.LOG, 1, 3)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_acacia_log, 4).getItem().getRegistryName(), null, new ItemStack(seamless_acacia_log, 4), new Object[]{"LL ", "LL ", "   ", 'L', new ItemStack(Blocks.LOG2, 1, 0)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_acacia_log, 4).getItem().getRegistryName(), null, new ItemStack(seamless_acacia_log, 4), new Object[]{" LL", " LL", "   ", 'L', new ItemStack(Blocks.LOG2, 1, 0)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_acacia_log, 4).getItem().getRegistryName(), null, new ItemStack(seamless_acacia_log, 4), new Object[]{"   ", "LL ", "LL ", 'L', new ItemStack(Blocks.LOG2, 1, 0)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_acacia_log, 4).getItem().getRegistryName(), null, new ItemStack(seamless_acacia_log, 4), new Object[]{"   ", " LL", " LL", 'L', new ItemStack(Blocks.LOG2, 1, 0)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_dark_oak_log, 4).getItem().getRegistryName(), null, new ItemStack(seamless_dark_oak_log, 4), new Object[]{"LL ", "LL ", "   ", 'L', new ItemStack(Blocks.LOG2, 1, 1)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_dark_oak_log, 4).getItem().getRegistryName(), null, new ItemStack(seamless_dark_oak_log, 4), new Object[]{" LL", " LL", "   ", 'L', new ItemStack(Blocks.LOG2, 1, 1)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_dark_oak_log, 4).getItem().getRegistryName(), null, new ItemStack(seamless_dark_oak_log, 4), new Object[]{"   ", "LL ", "LL ", 'L', new ItemStack(Blocks.LOG2, 1, 1)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_dark_oak_log, 4).getItem().getRegistryName(), null, new ItemStack(seamless_dark_oak_log, 4), new Object[]{"   ", " LL", " LL", 'L', new ItemStack(Blocks.LOG2, 1, 1)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_smooth_sandstone, 4).getItem().getRegistryName(), null, new ItemStack(seamless_smooth_sandstone, 4), new Object[]{"SS ", "SS ", "   ", 'S', new ItemStack(Blocks.SANDSTONE, 1, 2)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_smooth_sandstone, 4).getItem().getRegistryName(), null, new ItemStack(seamless_smooth_sandstone, 4), new Object[]{" SS", " SS", "   ", 'S', new ItemStack(Blocks.SANDSTONE, 1, 2)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_smooth_sandstone, 4).getItem().getRegistryName(), null, new ItemStack(seamless_smooth_sandstone, 4), new Object[]{"   ", "SS ", "SS ", 'S', new ItemStack(Blocks.SANDSTONE, 1, 2)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_smooth_sandstone, 4).getItem().getRegistryName(), null, new ItemStack(seamless_smooth_sandstone, 4), new Object[]{"   ", " SS", " SS", 'S', new ItemStack(Blocks.SANDSTONE, 1, 2)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_smooth_red_sandstone, 4).getItem().getRegistryName(), null, new ItemStack(seamless_smooth_red_sandstone, 4), new Object[]{"SS ", "SS ", "   ", 'S', new ItemStack(Blocks.RED_SANDSTONE, 1, 2)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_smooth_red_sandstone, 4).getItem().getRegistryName(), null, new ItemStack(seamless_smooth_red_sandstone, 4), new Object[]{" SS", " SS", "   ", 'S', new ItemStack(Blocks.RED_SANDSTONE, 1, 2)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_smooth_red_sandstone, 4).getItem().getRegistryName(), null, new ItemStack(seamless_smooth_red_sandstone, 4), new Object[]{"   ", "SS ", "SS ", 'S', new ItemStack(Blocks.RED_SANDSTONE, 1, 2)});
            GameRegistry.addShapedRecipe(new ItemStack(seamless_smooth_red_sandstone, 4).getItem().getRegistryName(), null, new ItemStack(seamless_smooth_red_sandstone, 4), new Object[]{"   ", " SS", " SS", 'S', new ItemStack(Blocks.RED_SANDSTONE, 1, 2)});
            GameRegistry.addShapelessRecipe(new ItemStack(Items.DYE, 1, 4).getItem().getRegistryName(), null, new ItemStack(Items.DYE, 1, 4), ModUtil.objectToIngredient(new Object[]{blue_tulip}));
            GameRegistry.addShapelessRecipe(new ItemStack(Items.DYE, 1, 0).getItem().getRegistryName(), null, new ItemStack(Items.DYE, 1, 0), ModUtil.objectToIngredient(new Object[]{black_tulip}));
            GameRegistry.addShapelessRecipe(new ItemStack(Items.DYE, 1, 2).getItem().getRegistryName(), null, new ItemStack(Items.DYE, 1, 2), ModUtil.objectToIngredient(new Object[]{green_tulip}));
            GameRegistry.addShapelessRecipe(new ItemStack(Items.DYE, 1, 11).getItem().getRegistryName(), null, new ItemStack(Items.DYE, 1, 11), ModUtil.objectToIngredient(new Object[]{yellow_tulip}));
            GameRegistry.addShapelessRecipe(new ItemStack(Items.DYE, 1, 5).getItem().getRegistryName(), null, new ItemStack(Items.DYE, 1, 5), ModUtil.objectToIngredient(new Object[]{purple_tulip}));
            GameRegistry.addShapedRecipe(new ItemStack(colour_changing_wool).getItem().getRegistryName(), null, new ItemStack(colour_changing_wool), new Object[]{" D ", "DWD", " D ", 'D', Items.DYE, 'W', Blocks.WOOL});
            GameRegistry.addShapedRecipe(new ItemStack(colour_changing_clay).getItem().getRegistryName(), null, new ItemStack(colour_changing_clay), new Object[]{" D ", "DCD", " D ", 'D', Items.DYE, 'C', Blocks.STAINED_HARDENED_CLAY});
            GameRegistry.addShapedRecipe(new ItemStack(colour_changing_glass).getItem().getRegistryName(), null, new ItemStack(colour_changing_glass), new Object[]{" D ", "DGD", " D ", 'D', Items.DYE, 'G', Blocks.STAINED_GLASS});
            //GameRegistry.addShapedRecipe(new ItemStack(crusher).getItem().getRegistryName(), null, new ItemStack(crusher), new Object[]{"SPS", "RTR", "SPS", 'S', Blocks.STONE, 'P', Blocks.STICKY_PISTON, 'R', Items.REDSTONE, 'T', tin_block});
            //GameRegistry.addShapedRecipe(new ItemStack(crusher).getItem().getRegistryName(), null, new ItemStack(crusher), new Object[]{"SRS", "PTP", "SRS", 'S', Blocks.STONE, 'P', Blocks.STICKY_PISTON, 'R', Items.REDSTONE, 'T', tin_block});
            GameRegistry.addShapedRecipe(new ItemStack(basalt_bricks, 4).getItem().getRegistryName(), null, new ItemStack(basalt_bricks, 4), new Object[]{"BB ", "BB ", "   ", 'B', basalt});
            GameRegistry.addShapedRecipe(new ItemStack(basalt_bricks, 4).getItem().getRegistryName(), null, new ItemStack(basalt_bricks, 4), new Object[]{" BB", " BB", "   ", 'B', basalt});
            GameRegistry.addShapedRecipe(new ItemStack(basalt_bricks, 4).getItem().getRegistryName(), null, new ItemStack(basalt_bricks, 4), new Object[]{"   ", "BB ", "BB ", 'B', basalt});
            GameRegistry.addShapedRecipe(new ItemStack(basalt_bricks, 4).getItem().getRegistryName(), null, new ItemStack(basalt_bricks, 4), new Object[]{"   ", " BB", " BB", 'B', basalt});
            GameRegistry.addShapedRecipe(new ItemStack(polished_basalt, 9).getItem().getRegistryName(), null, new ItemStack(polished_basalt, 9), new Object[]{"BBB", "BBB", "BBB", 'B', basalt});
            GameRegistry.addShapedRecipe(new ItemStack(polished_stone, 9).getItem().getRegistryName(), null, new ItemStack(polished_stone, 9), new Object[]{"SSS", "SSS", "SSS", 'S', new ItemStack(Blocks.STONE, 1, 0)});
            GameRegistry.addShapedRecipe(new ItemStack(Blocks.STONE, 9, 2).getItem().getRegistryName(), null, new ItemStack(Blocks.STONE, 9, 2), new Object[]{"GGG", "GGG", "GGG", 'G', new ItemStack(Blocks.STONE, 1, 1)});
            GameRegistry.addShapedRecipe(new ItemStack(Blocks.STONE, 9, 4).getItem().getRegistryName(), null, new ItemStack(Blocks.STONE, 9, 4), new Object[]{"DDD", "DDD", "DDD", 'D', new ItemStack(Blocks.STONE, 1, 3)});
            GameRegistry.addShapedRecipe(new ItemStack(Blocks.STONE, 9, 6).getItem().getRegistryName(), null, new ItemStack(Blocks.STONE, 9, 6), new Object[]{"AAA", "AAA", "AAA", 'A', new ItemStack(Blocks.STONE, 1, 5)});
            GameRegistry.addShapedRecipe(new ItemStack(granite_bricks, 4).getItem().getRegistryName(), null, new ItemStack(granite_bricks, 4), new Object[]{"GG ", "GG ", "   ", 'G', new ItemStack(Blocks.STONE, 1, 1)});
            GameRegistry.addShapedRecipe(new ItemStack(granite_bricks, 4).getItem().getRegistryName(), null, new ItemStack(granite_bricks, 4), new Object[]{" GG", " GG", "   ", 'G', new ItemStack(Blocks.STONE, 1, 1)});
            GameRegistry.addShapedRecipe(new ItemStack(granite_bricks, 4).getItem().getRegistryName(), null, new ItemStack(granite_bricks, 4), new Object[]{"   ", "GG ", "GG ", 'G', new ItemStack(Blocks.STONE, 1, 1)});
            GameRegistry.addShapedRecipe(new ItemStack(granite_bricks, 4).getItem().getRegistryName(), null, new ItemStack(granite_bricks, 4), new Object[]{"   ", " GG", " GG", 'G', new ItemStack(Blocks.STONE, 1, 1)});
            GameRegistry.addShapedRecipe(new ItemStack(diorite_bricks, 4).getItem().getRegistryName(), null, new ItemStack(diorite_bricks, 4), new Object[]{"DD ", "DD ", "   ", 'D', new ItemStack(Blocks.STONE, 1, 3)});
            GameRegistry.addShapedRecipe(new ItemStack(diorite_bricks, 4).getItem().getRegistryName(), null, new ItemStack(diorite_bricks, 4), new Object[]{" DD", " DD", "   ", 'D', new ItemStack(Blocks.STONE, 1, 3)});
            GameRegistry.addShapedRecipe(new ItemStack(diorite_bricks, 4).getItem().getRegistryName(), null, new ItemStack(diorite_bricks, 4), new Object[]{"   ", "DD ", "DD ", 'D', new ItemStack(Blocks.STONE, 1, 3)});
            GameRegistry.addShapedRecipe(new ItemStack(diorite_bricks, 4).getItem().getRegistryName(), null, new ItemStack(diorite_bricks, 4), new Object[]{"   ", " DD", " DD", 'D', new ItemStack(Blocks.STONE, 1, 3)});
            GameRegistry.addShapedRecipe(new ItemStack(andesite_bricks, 4).getItem().getRegistryName(), null, new ItemStack(andesite_bricks, 4), new Object[]{"AA ", "AA ", "   ", 'A', new ItemStack(Blocks.STONE, 1, 5)});
            GameRegistry.addShapedRecipe(new ItemStack(andesite_bricks, 4).getItem().getRegistryName(), null, new ItemStack(andesite_bricks, 4), new Object[]{" AA", " AA", "   ", 'A', new ItemStack(Blocks.STONE, 1, 5)});
            GameRegistry.addShapedRecipe(new ItemStack(andesite_bricks, 4).getItem().getRegistryName(), null, new ItemStack(andesite_bricks, 4), new Object[]{"   ", "AA ", "AA ", 'A', new ItemStack(Blocks.STONE, 1, 5)});
            GameRegistry.addShapedRecipe(new ItemStack(andesite_bricks, 4).getItem().getRegistryName(), null, new ItemStack(andesite_bricks, 4), new Object[]{"   ", " AA", " AA", 'A', new ItemStack(Blocks.STONE, 1, 5)});
            GameRegistry.addShapelessRecipe(new ItemStack(sandy_bricks).getItem().getRegistryName(), null, new ItemStack(sandy_bricks), ModUtil.objectToIngredient(new Object[]{Blocks.SAND, Blocks.BRICK_BLOCK}));
            GameRegistry.addShapelessRecipe(new ItemStack(sandy_stone_bricks).getItem().getRegistryName(), null, new ItemStack(sandy_stone_bricks), ModUtil.objectToIngredient(new Object[]{Blocks.SAND, Blocks.STONEBRICK}));
            GameRegistry.addShapelessRecipe(new ItemStack(dark_nether_bricks).getItem().getRegistryName(), null, new ItemStack(dark_nether_bricks), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.NETHER_BRICK), new ItemStack(Items.DYE, 1, 0)}));
            GameRegistry.addShapedRecipe(new ItemStack(wooden_pattern, 16).getItem().getRegistryName(), null, new ItemStack(wooden_pattern, 16), new Object[]{"WS ", "SW ", "   ", 'S', new ItemStack(Items.STICK), 'W', Blocks.PLANKS});
            GameRegistry.addShapedRecipe(new ItemStack(wooden_pattern, 16).getItem().getRegistryName(), null, new ItemStack(wooden_pattern, 16), new Object[]{" WS", " SW", "   ", 'S', new ItemStack(Items.STICK), 'W', Blocks.PLANKS});
            GameRegistry.addShapedRecipe(new ItemStack(wooden_pattern, 16).getItem().getRegistryName(), null, new ItemStack(wooden_pattern, 16), new Object[]{"   ", "WS ", "SW ", 'S', new ItemStack(Items.STICK), 'W', Blocks.PLANKS});
            GameRegistry.addShapedRecipe(new ItemStack(wooden_pattern, 16).getItem().getRegistryName(), null, new ItemStack(wooden_pattern, 16), new Object[]{"   ", " WS", " SW", 'S', new ItemStack(Items.STICK), 'W', Blocks.PLANKS});
            GameRegistry.addShapedRecipe(new ItemStack(wooden_pattern, 16).getItem().getRegistryName(), null, new ItemStack(wooden_pattern, 16), new Object[]{"SW ", "WS ", "   ", 'S', new ItemStack(Items.STICK), 'W', Blocks.PLANKS});
            GameRegistry.addShapedRecipe(new ItemStack(wooden_pattern, 16).getItem().getRegistryName(), null, new ItemStack(wooden_pattern, 16), new Object[]{" SW", " WS", "   ", 'S', new ItemStack(Items.STICK), 'W', Blocks.PLANKS});
            GameRegistry.addShapedRecipe(new ItemStack(wooden_pattern, 16).getItem().getRegistryName(), null, new ItemStack(wooden_pattern, 16), new Object[]{"   ", "SW ", "WS ", 'S', new ItemStack(Items.STICK), 'W', Blocks.PLANKS});
            GameRegistry.addShapedRecipe(new ItemStack(wooden_pattern, 16).getItem().getRegistryName(), null, new ItemStack(wooden_pattern, 16), new Object[]{"   ", " SW", " WS", 'S', new ItemStack(Items.STICK), 'W', Blocks.PLANKS});
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_bars).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_bars), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.IRON_BARS}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_bars).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_bars), ModUtil.objectToIngredient(new Object[]{wooden_pattern, gold_bars}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_bars).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_bars), ModUtil.objectToIngredient(new Object[]{wooden_pattern, diamond_bars}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_bars).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_bars), ModUtil.objectToIngredient(new Object[]{wooden_pattern, copper_bars}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_bars).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_bars), ModUtil.objectToIngredient(new Object[]{wooden_pattern, tin_bars}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_bars).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_bars), ModUtil.objectToIngredient(new Object[]{wooden_pattern, bronze_bars}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_bars).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_bars), ModUtil.objectToIngredient(new Object[]{wooden_pattern, amethyst_bars}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_bars).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_bars), ModUtil.objectToIngredient(new Object[]{wooden_pattern, quartz_bars}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_bars).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_bars), ModUtil.objectToIngredient(new Object[]{wooden_pattern, emerald_bars}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_bars).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_bars), ModUtil.objectToIngredient(new Object[]{wooden_pattern, jade_bars}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_bars).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_bars), ModUtil.objectToIngredient(new Object[]{wooden_pattern, stone_bars}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_button).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_button), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.WOODEN_BUTTON}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_button).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_button), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.STONE_BUTTON}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_button).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_button), ModUtil.objectToIngredient(new Object[]{wooden_pattern, gold_button}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_button).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_button), ModUtil.objectToIngredient(new Object[]{wooden_pattern, diamond_button}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_button).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_button), ModUtil.objectToIngredient(new Object[]{wooden_pattern, copper_button}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_button).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_button), ModUtil.objectToIngredient(new Object[]{wooden_pattern, tin_button}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_button).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_button), ModUtil.objectToIngredient(new Object[]{wooden_pattern, bronze_button}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_button).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_button), ModUtil.objectToIngredient(new Object[]{wooden_pattern, amethyst_button}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_button).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_button), ModUtil.objectToIngredient(new Object[]{wooden_pattern, jade_button}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_button).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_button), ModUtil.objectToIngredient(new Object[]{wooden_pattern, emerald_button}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_button).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_button), ModUtil.objectToIngredient(new Object[]{wooden_pattern, quartz_button}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_pressure_plate).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_pressure_plate), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.WOODEN_PRESSURE_PLATE}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_pressure_plate).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_pressure_plate), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.STONE_PRESSURE_PLATE}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_pressure_plate).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_pressure_plate), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.LIGHT_WEIGHTED_PRESSURE_PLATE}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_pressure_plate).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_pressure_plate), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.HEAVY_WEIGHTED_PRESSURE_PLATE}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_pressure_plate).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_pressure_plate), ModUtil.objectToIngredient(new Object[]{wooden_pattern, diamond_pressure_plate}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_pressure_plate).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_pressure_plate), ModUtil.objectToIngredient(new Object[]{wooden_pattern, emerald_pressure_plate}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_pressure_plate).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_pressure_plate), ModUtil.objectToIngredient(new Object[]{wooden_pattern, quartz_pressure_plate}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_pressure_plate).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_pressure_plate), ModUtil.objectToIngredient(new Object[]{wooden_pattern, tin_pressure_plate}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_pressure_plate).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_pressure_plate), ModUtil.objectToIngredient(new Object[]{wooden_pattern, copper_pressure_plate}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_pressure_plate).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_pressure_plate), ModUtil.objectToIngredient(new Object[]{wooden_pattern, bronze_pressure_plate}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_pressure_plate).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_pressure_plate), ModUtil.objectToIngredient(new Object[]{wooden_pattern, amethyst_pressure_plate}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_pressure_plate).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_pressure_plate), ModUtil.objectToIngredient(new Object[]{wooden_pattern, jade_pressure_plate}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_trapdoor).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_trapdoor), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.TRAPDOOR}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_trapdoor).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_trapdoor), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.IRON_TRAPDOOR}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_trapdoor).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_trapdoor), ModUtil.objectToIngredient(new Object[]{wooden_pattern, gold_trapdoor}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_trapdoor).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_trapdoor), ModUtil.objectToIngredient(new Object[]{wooden_pattern, diamond_trapdoor}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_trapdoor).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_trapdoor), ModUtil.objectToIngredient(new Object[]{wooden_pattern, emerald_trapdoor}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_trapdoor).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_trapdoor), ModUtil.objectToIngredient(new Object[]{wooden_pattern, quartz_trapdoor}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_trapdoor).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_trapdoor), ModUtil.objectToIngredient(new Object[]{wooden_pattern, tin_trapdoor}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_trapdoor).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_trapdoor), ModUtil.objectToIngredient(new Object[]{wooden_pattern, copper_trapdoor}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_trapdoor).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_trapdoor), ModUtil.objectToIngredient(new Object[]{wooden_pattern, bronze_trapdoor}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_trapdoor).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_trapdoor), ModUtil.objectToIngredient(new Object[]{wooden_pattern, amethyst_trapdoor}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_trapdoor).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_trapdoor), ModUtil.objectToIngredient(new Object[]{wooden_pattern, jade_trapdoor}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_trapdoor).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_trapdoor), ModUtil.objectToIngredient(new Object[]{wooden_pattern, stone_trapdoor}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_wall).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_wall), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.COBBLESTONE_WALL}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_wall).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_wall), ModUtil.objectToIngredient(new Object[]{wooden_pattern, new ItemStack(Blocks.COBBLESTONE_WALL, 1, 1)}));
            /*GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_wall).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_wall), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.iron_wall}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_wall).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_wall), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.stone_wall}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_wall).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_wall), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.gold_wall}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_wall).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_wall), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.diamond_wall}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_wall).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_wall), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.emerald_wall}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_wall).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_wall), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.quartz_wall}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_wall).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_wall), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.copper_wall}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_wall).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_wall), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.tin_wall}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_wall).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_wall), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.bronze_wall}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_wall).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_wall), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.amethyst_wall}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_wall).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_wall), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.jade_wall}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_wall).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_wall), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.brick_wall}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_wall).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_wall), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.stonebrick_wall}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_wall).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_wall), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.granite_bricks_wall}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_wall).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_wall), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.diorite_bricks_wall}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_wall).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_wall), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.andesite_bricks_wall}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_wall).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_wall), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.basalt_bricks_wall}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_wall).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_wall), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.sandy_stone_bricks_wall}));*/
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_fence).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_fence), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.ACACIA_FENCE}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_fence).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_fence), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.OAK_FENCE}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_fence).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_fence), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.BIRCH_FENCE}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_fence).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_fence), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.DARK_OAK_FENCE}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_fence).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_fence), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.JUNGLE_FENCE}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_fence).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_fence), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.DARK_OAK_FENCE}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_fence).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_fence), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.NETHER_BRICK_FENCE}));
            /*GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_fence).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_fence), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.dark_nether_bricks_fence}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_fence).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_fence), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.red_nether_bricks_fence}));*/
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_fence_gate).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_fence_gate), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.ACACIA_FENCE_GATE}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_fence_gate).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_fence_gate), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.OAK_FENCE_GATE}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_fence_gate).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_fence_gate), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.BIRCH_FENCE_GATE}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_fence_gate).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_fence_gate), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.DARK_OAK_FENCE_GATE}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_fence_gate).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_fence_gate), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.JUNGLE_FENCE_GATE}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_fence_gate).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_fence_gate), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.DARK_OAK_FENCE_GATE}));
            /*GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_fence_gate).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_fence_gate), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.nether_bricks_fence_gate}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_fence_gate).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_fence_gate), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.dark_nether_bricks_fence_gate}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_fence_gate).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_fence_gate), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.red_nether_bricks_fence_gate}));*/
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.ACACIA_STAIRS}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.BIRCH_STAIRS}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.OAK_STAIRS}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.SPRUCE_STAIRS}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.DARK_OAK_STAIRS}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.JUNGLE_STAIRS}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.NETHER_BRICK_STAIRS}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.PURPUR_STAIRS}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.QUARTZ_STAIRS}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.SANDSTONE_STAIRS}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.RED_SANDSTONE_STAIRS}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.STONE_BRICK_STAIRS}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, Blocks.STONE_STAIRS}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.oak_log_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.seamless_oak_log_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.birch_log_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.seamless_birch_log_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.spruce_log_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.seamless_spruce_log_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.jungle_log_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.seamless_jungle_log_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.acacia_log_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.seamless_acacia_log_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.dark_oak_log_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.seamless_dark_oak_log_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.coal_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.iron_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.gold_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.lapis_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.redstone_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.diamond_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.copper_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.bronze_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.tin_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.jade_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.amethyst_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.stone_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.granite_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.andesite_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.diorite_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.basalt_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.granite_bricks_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.andesite_bricks_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.diorite_bricks_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.basalt_bricks_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.sandy_stone_bricks_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.seamless_smooth_sandstone_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.seamless_smooth_red_sandstone_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.prismarine_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.prismarine_bricks_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.dark_prismarine_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.obsidian_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.bone_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.end_stone_bricks_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.red_nether_bricks_stairs}));
            GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs), ModUtil.objectToIngredient(new Object[]{wooden_pattern, ModElementsSmallerBlocks.dark_nether_bricks_stairs}));
            if (Config.duplicate_patterns) {
                GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_bars, 2).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_bars, 2), ModUtil.objectToIngredient(new Object[]{new ItemStack(wooden_pattern), new ItemStack(wooden_pattern_bars)}));
                GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_button, 2).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_button, 2), ModUtil.objectToIngredient(new Object[]{new ItemStack(wooden_pattern), new ItemStack(wooden_pattern_button)}));
                GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_pressure_plate, 2).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_pressure_plate, 2), ModUtil.objectToIngredient(new Object[]{new ItemStack(wooden_pattern), new ItemStack(wooden_pattern_pressure_plate)}));
                GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_trapdoor, 2).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_trapdoor, 2), ModUtil.objectToIngredient(new Object[]{new ItemStack(wooden_pattern), new ItemStack(wooden_pattern_trapdoor)}));
                GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_wall, 2).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_wall, 2), ModUtil.objectToIngredient(new Object[]{new ItemStack(wooden_pattern), new ItemStack(wooden_pattern_wall)}));
                GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_fence, 2).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_fence, 2), ModUtil.objectToIngredient(new Object[]{new ItemStack(wooden_pattern), new ItemStack(wooden_pattern_fence)}));
                GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_fence_gate, 2).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_fence_gate, 2), ModUtil.objectToIngredient(new Object[]{new ItemStack(wooden_pattern), new ItemStack(wooden_pattern_fence_gate)}));
                GameRegistry.addShapelessRecipe(new ItemStack(wooden_pattern_stairs, 2).getItem().getRegistryName(), null, new ItemStack(wooden_pattern_stairs, 2), ModUtil.objectToIngredient(new Object[]{new ItemStack(wooden_pattern), new ItemStack(wooden_pattern_stairs)}));
            }

            GameRegistry.addShapedRecipe(new ItemStack(scaffolding_block, 16).getItem().getRegistryName(), null, new ItemStack(scaffolding_block, 16), new Object[]{"SSS", "S S", "SSS", 'S', Items.STICK});
            GameRegistry.addShapelessRecipe(new ItemStack(Items.NETHER_WART, 9).getItem().getRegistryName(), null, new ItemStack(Items.NETHER_WART, 9), ModUtil.objectToIngredient(new Object[]{Blocks.NETHER_WART_BLOCK}));

            int metaData;
            for(metaData = 0; metaData < 16; ++metaData) {
                GameRegistry.addShapelessRecipe(new ItemStack(Items.STRING, 4).getItem().getRegistryName(), null, new ItemStack(Items.STRING, 4), ModUtil.objectToIngredient(new Object[]{new ItemStack(Blocks.WOOL, 1, metaData)}));
            }

            GameRegistry.addShapelessRecipe(new ItemStack(Items.STRING, 4).getItem().getRegistryName(), null, new ItemStack(Items.STRING, 4), ModUtil.objectToIngredient(new Object[]{new ItemStack(colour_changing_wool)}));

            for(metaData = 0; metaData < 7; ++metaData) {
                GameRegistry.addShapedRecipe(new ItemStack(Blocks.FURNACE).getItem().getRegistryName(), null, new ItemStack(Blocks.FURNACE), new Object[]{"SSS", "S S", "SSS", 'S', new ItemStack(Blocks.STONE, 1, metaData)});
            }

            GameRegistry.addShapedRecipe(new ItemStack(Blocks.FURNACE).getItem().getRegistryName(), null, new ItemStack(Blocks.FURNACE), new Object[]{"SSS", "S S", "SSS", 'S', new ItemStack(Blocks.MOSSY_COBBLESTONE)});

            for(metaData = 0; metaData < 4; ++metaData) {
                GameRegistry.addShapedRecipe(new ItemStack(Blocks.FURNACE).getItem().getRegistryName(), null, new ItemStack(Blocks.FURNACE), new Object[]{"SSS", "S S", "SSS", 'S', new ItemStack(Blocks.STONEBRICK, 1, metaData)});
            }

            GameRegistry.addShapedRecipe(new ItemStack(Blocks.FURNACE).getItem().getRegistryName(), null, new ItemStack(Blocks.FURNACE), new Object[]{"SSS", "S S", "SSS", 'S', new ItemStack(basalt)});
            GameRegistry.addShapedRecipe(new ItemStack(Blocks.FURNACE).getItem().getRegistryName(), null, new ItemStack(Blocks.FURNACE), new Object[]{"SSS", "S S", "SSS", 'S', new ItemStack(polished_basalt)});
            GameRegistry.addShapedRecipe(new ItemStack(Blocks.FURNACE).getItem().getRegistryName(), null, new ItemStack(Blocks.FURNACE), new Object[]{"SSS", "S S", "SSS", 'S', new ItemStack(polished_stone)});
            GameRegistry.addShapedRecipe(new ItemStack(Blocks.FURNACE).getItem().getRegistryName(), null, new ItemStack(Blocks.FURNACE), new Object[]{"SSS", "S S", "SSS", 'S', new ItemStack(basalt_bricks)});
            GameRegistry.addShapedRecipe(new ItemStack(Blocks.FURNACE).getItem().getRegistryName(), null, new ItemStack(Blocks.FURNACE), new Object[]{"SSS", "S S", "SSS", 'S', new ItemStack(granite_bricks)});
            GameRegistry.addShapedRecipe(new ItemStack(Blocks.FURNACE).getItem().getRegistryName(), null, new ItemStack(Blocks.FURNACE), new Object[]{"SSS", "S S", "SSS", 'S', new ItemStack(andesite_bricks)});
            GameRegistry.addShapedRecipe(new ItemStack(Blocks.FURNACE).getItem().getRegistryName(), null, new ItemStack(Blocks.FURNACE), new Object[]{"SSS", "S S", "SSS", 'S', new ItemStack(diorite_bricks)});
            GameRegistry.addShapedRecipe(new ItemStack(Blocks.FURNACE).getItem().getRegistryName(), null, new ItemStack(Blocks.FURNACE), new Object[]{"SSS", "S S", "SSS", 'S', new ItemStack(Blocks.BRICK_BLOCK)});
        }

    }

    public static void registerOreDictionary() {
        OreDictionary.registerOre("copperIngot", copper_ingot);
        OreDictionary.registerOre("tinIngot", tin_ingot);
        OreDictionary.registerOre("bronzeIngot", bronze_ingot);
        OreDictionary.registerOre("jade", jade);
        OreDictionary.registerOre("copperOre", copper_ore);
        OreDictionary.registerOre("tinOre", tin_ore);
        OreDictionary.registerOre("jadeOre", jade_ore);
        OreDictionary.registerOre("amethystOre", amethyst_ore);
    }

    public static void registerAchievements() {
        /*copperMiner = (new Advancement(new ResourceLocation("achievement.copperminer"), new ResourceLocation("copperminer"), 0, 2, copper_ore, (Advancement)null)).func_75971_g();
        tinMiner = (new Advancement("achievement.tinminer", "tinminer", 0, 0, tin_ore, (Achievement)null)).func_75971_g();
        bronzeCreator = (new Advancement("achievement.bronzecreator", "bronzecreator", -1, 1, bronze_ingot, copperMiner)).func_75971_g();
        amethystMiner = (new Advancement("achievement.amethystminer", "amethystminer", -3, 1, amethyst_ore, (Achievement)null)).func_75971_g();
        diamondUpgrade = (new Advancement("achievement.diamondUpgrade", "diamondUpgrade", 0, 4, ModElementsToolsArmour.diamond_multitool, (Achievement)null)).func_75971_g();
        amethystUpgrade = (new Advancement("achievement.amethystUpgrade", "amethystUpgrade", -2, 4, ModElementsToolsArmour.amethyst_multitool, diamondUpgrade)).func_75971_g();
        theOpTool = (new Advancement("achievement.theOpTool", "theOpTool", -4, 4, ModElementsToolsArmour.op_multitool, amethystUpgrade)).func_75971_g();
        moreFlowers = (new Advancement("achievement.moreFlowers", "moreFlowers", 2, 0, purple_tulip, (Achievement)null)).func_75971_g();
        AchievementPage.registerAchievementPage(new AchievementPage("MCrafterzz mod", new Achievement[]{copperMiner, tinMiner, bronzeCreator, amethystMiner, diamondUpgrade, amethystUpgrade, theOpTool, moreFlowers}));
        FMLCommonHandler.instance().bus().register(new AchievementEvents() {
        });*/
    }

    public static void registerStats() {
        //open_crusher_gui = (new StatBase("stats.open_crusher_gui", new TextComponentTranslation("stats.open_crusher_gui", new Object[0]))).registerStat();
    }
}